{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Plus Mobile Apps","text":"<p>A mobile app company and tech blog.</p> <p></p>"},{"location":"about/","title":"About","text":""},{"location":"about/#intro","title":"Intro","text":"<p>This website is created and maintained by me, Andrew Steinmetz. I have been a professional Android developer since 2018 and have always had a passion for technology.</p> <p></p>"},{"location":"about/#motivation","title":"Motivation","text":"<p>I created this website as a place to teach others all of the different types of technology I've learned myself, since a wise man once said:</p> <p>The best way to learn something, is to teach.</p> <p>So I hope you learn something when you visit!</p>"},{"location":"about/#background","title":"Background","text":"<p>I originally started as a Java developer since that is what Android used to be written in. Ever since Google announced Kotlin as a first class language for Android, that has been the primary language I use for my day job. In my free time, I have written a decent amount of Dart code for Flutter and back in college had dabbled with Swift and Javascipt.</p> <p>Since I work at a company that has to develop the same app for web, iOS and Android, each written in their own language living in different code bases. I have been on the hunt for a solution to write these same apps all in one code base using the same language. So even though my favorite language is Kotlin which has a solution for this problem, I can acknowledge there are many other solutions out there that might be better depending on your needs so I try not to favorite one over another since this site itself is just statically generated with material mkdocs.</p>"},{"location":"about/#contact","title":"Contact","text":"<p>Email: andrew@plusmobileapps.com</p> <p>Twitter: @plusmobileapps</p> <p>Github: plusmobileapps</p> <p>Linked In: Andrew Steinmetz</p>"},{"location":"blog/","title":"Plus Mobile Apps Blog","text":""},{"location":"blog/2018/07/20/how-to-use-ssh/","title":"How to Use SSH","text":"<p>Before getting into the professional field of software development, I had always used https for cloning all of my git repositories. It wasn't until I started juggling three different github accounts between personal, school, and work, that I realized there had to be a better way. In comes secure shell, or SSH for short, to never need to enter in a login password again!</p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#what-is-ssh","title":"What is SSH?","text":"<p>SSH is a secure protocol and a safe way of administering remote servers such as git repositories like Github. </p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#check-for-existing-key","title":"Check for existing Key","text":"<p>It is a good idea to first check if there is already a default key on your computer by looking at the default folder for a mac where ssh keys are kept running <code>ls -l ~/.ssh</code>. If one exists already, the default names should be <code>id_rsa</code> and <code>id_rsa.pub</code>. If neither are there, then you'll learn how to make one in the next step. </p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#creating-the-key","title":"Creating the Key","text":"<p>If you don't have a key already or want to setup a key for a different email account. Then run the following command entering with the desired email. For simplicity of commands, let's switch to the <code>/.ssh</code> directory for now. </p> <p><pre><code>cd ~/.ssh\nssh-keygen -t rsa -C \"your-email-address\"\n</code></pre> You should then be prompted to enter the name to save the files as, feel free to name what ever you want. To follow suit of the default, I named mine as <code>id_rsa_COMPANY</code>, <code>id_rsa_SCHOOL</code>, <code>id_rsa_DEVELOP</code>.</p> <p>Next, you will be asked to enter a passphrase to encrypt the private and public key. If you do not wish to enter one, simply press enter twice to confirm although this is not recommended. </p> <p>Great, now you just created an SSH key associated for that email account!</p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#save-the-ssh-passphrase-to-your-system","title":"Save the SSH Passphrase to Your System","text":"<p>If you created a SSH key with a unique name and don't want to enter this passphrase from the previous step every time. Then enter the following command. </p> <p><pre><code>ssh-add id_rsa_DEVELOP\n</code></pre> Now enter the passphrase you just entered in the previous step.</p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#what-are-these-id_rsa-files","title":"What are These <code>id_rsa</code> Files?","text":"<p><code>id_rsa</code> is your private key for the account and should never leave your machine, as this is what your computer uses to sign any work done for this account. </p> <p><code>id_rsa.pub</code> is the public key for the account, this is what you will use to enter on what ever version control system (VCS) you desire, such as github. </p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#adding-public-key-to-vcs","title":"Adding Public Key to VCS","text":"<p>Log into whatever version control system you use, for my use case I use GitHub. Typically if you go into the settings, there should be a section for SSH and GPG keys. Click new SSH key and for the title, enter the name of the device you will be able to identify it such as <code>personal-desktop</code> and then copy-paste the contents of the <code>id_rsa.pub</code> file into the key section. Finally click add SSH key!</p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#configuring-private-keys","title":"Configuring Private Keys","text":"<p>So now that you've created a key and associated it with your appropriate version control, its time to make a config file so your computer can know how to communicate with your version control using the private key. Still in the <code>.ssh</code> folder, check if a <code>config</code> file exists with <code>ls -l</code>. If not not, run:</p> <p><pre><code>touch ~/.ssh/config    //creates a blank config file\natom config             //open with atom editor, feel free to use your own editor\n</code></pre> Now working in the <code>config</code> file, lets setup our personal account that we will be using the most to clone repos. Enter the following block of code. </p> <p><pre><code>#Default GitHub\nHost github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa\n</code></pre> This will allow you to clone repositories using the SSH urls just like:  <pre><code>git clone git@github.com:username/repo-name\n</code></pre></p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#configure-multiple-emails","title":"Configure Multiple Emails","text":"<p>Let's say for example you have a repository that you need to access at work and you want all associated work to be made with that email account. Opening the <code>config</code> file again, enter the following block of code. </p> <p><pre><code>Host github-COMPANY\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_COMPANY\n</code></pre> Now if you ever need to clone a repository from this account, simply replace <code>github.com</code> with <code>github-COMPANY</code> like:</p> <p><pre><code>git clone git@github-COMPANY:username/repo-name\n</code></pre> I recommend setting up work and school emails this way since I only clone one repository from work and a small handful for school. </p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#conclusion","title":"Conclusion","text":"<p>Now any repos you clone, all work that is commited will be logged as that email and you'll never need to constantly log into different accounts. </p>"},{"location":"blog/2018/07/20/how-to-use-ssh/#references","title":"References","text":"<p>Secure shell general info</p> <p>Create multiple accounts</p>"},{"location":"blog/2018/07/30/shell-scripts/","title":"Why Shell Script?","text":"<p>If you find yourself running a bunch of bash commands that you would like to version control and share with others, shell script is what you are looking for. </p>"},{"location":"blog/2018/07/30/shell-scripts/#what-is-a-shell-script","title":"What is a Shell Script?","text":"<p>Shell scripts are an executable file that contain bash commands to execute. The file extension of shell scripts are <code>.sh</code> and are ran by putting a <code>./</code> in front of the file name. Putting this all together in an example: </p>"},{"location":"blog/2018/07/30/shell-scripts/#creating-a-shell-script-example","title":"Creating a Shell Script Example","text":"<p>Create a file and open it in your favorite editor. </p> <pre><code>touch dosomething.sh\ncode dosomething.sh\n</code></pre> <p>Add some bash commands to the file. </p> <pre><code># dosomething.sh\necho Hello World!\necho \"Second line in bash command\" \n</code></pre> <p>Now before you can run the bash file, touching files does not give executable permissions by default. So we need to make it executable by changing the permissions with the <code>chmod</code> command. </p> <pre><code>chmod +x dosomething.sh\n</code></pre> <p>Finally you can run the shell script!</p> <pre><code>./dosomething.sh\n</code></pre>"},{"location":"blog/2018/07/30/shell-scripts/#resources","title":"Resources","text":"<p>About shell scripts in Terminal on Mac - Apple Docs</p>"},{"location":"blog/2018/09/26/android-location-basics/","title":"Android Location Basics","text":"<p>Sample app that will demonstrate the basics in retrieving a user's location and requesting permission at runtime on Android.</p> <p>Sample Android App GitHub Repository</p>"},{"location":"blog/2018/09/26/android-location-basics/#setup-google-play-services-in-android-studio","title":"Setup Google Play Services In Android Studio","text":"<p>If you open up Android Studio Settings, go to <code>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK</code>. Then click on the <code>SDK Tools</code> tab and check <code>Google Play services</code></p>"},{"location":"blog/2018/09/26/android-location-basics/#setup-google-map-fragment","title":"Setup Google Map Fragment","text":"<p>Add the dependency to the application's <code>build.gradle</code> file: </p> <pre><code>dependencies {\n\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\n\n}\n</code></pre> <p>Get an API key for maps by visiting this site and creating a project. Once you have the key, for debugging purposes we will add this key to a string resource file in the <code>debug</code> folder. </p> <pre><code> &lt;!--  app/src/debug/res/values/google_maps_api.xml--&gt;\n&lt;resources&gt;\n    &lt;string name=\"google_maps_key\" templateMergeStrategy=\"preserve\" translatable=\"false\"&gt;YOUR_KEY_HERE&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <p>Now in the <code>AndroidManifest.xml</code>, place the following inside the <code>application</code> tag. </p> <pre><code>&lt;application&gt;\n\n    &lt;meta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"@string/google_maps_key\" /&gt;\n\n&lt;/application&gt;\n</code></pre> <p>Now create a <code>SupportMapFragment</code> by creating a <code>fragment</code> tag in an xml layout file. </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;fragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/map\"\n    android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MapsActivity\" /&gt;\n</code></pre> <p>Now run the app, and the map should load up!</p>"},{"location":"blog/2018/09/26/android-location-basics/#doing-more-with-the-supportmapfragment","title":"Doing More with the <code>SupportMapFragment</code>","text":"<p>In your fragment or activity, use the <code>FragmentManager</code> to find the fragment. and call <code>SupportMapFragment.getMapAsync {}</code> to perform actions once the map itself is ready. </p> <pre><code> val mapFragment = supportFragmentManager.findFragmentById(R.id.map_fragment) as SupportMapFragment\n        mapFragment.getMapAsync { googleMap: GoogleMap? -&gt;\n            googleMap ?: return@getMapAsync\n            val paddingBottom =\n                TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 60f, resources.displayMetrics)\n                    .roundToInt()\n            googleMap.apply {\n                setPadding(0,0,0, paddingBottom)\n                // Add a marker in Sydney and move the camera\n                val sydney = LatLng(-34.0, 151.0)\n                addMarker(MarkerOptions().position(sydney).title(\"Marker in Sydney\"))\n                animateCamera(CameraUpdateFactory.newLatLng(sydney))\n            }\n        }\n</code></pre> <p>This sets a padding on the bottom so the Google Logo and buttons will render above the FAB. Then it creates a marker for Sydney Australia and pans to the camera to this location for the user. </p>"},{"location":"blog/2018/09/26/android-location-basics/#resources","title":"Resources","text":"<ul> <li>Location and Context Overview - Android Docs - good starting point to see what is available for Android Location API's</li> <li>Getting started with Google Maps SDK</li> <li>Making Android sensors and location work for you - Google I/O 2016</li> <li>Android Sensors &amp; Location: What's New &amp; Best Practices (Google I/O '17)</li> <li>How to get one-meter location-accuracy from Android devices (Google I/O '18) - interesting talk, but more suited if you are attempting to create an app with indoor navigation </li> <li>Updating Your Apps for Location Permission Changes in Android Q (Google I/O'19)</li> </ul>"},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/","title":"Android Bash Profile and Terminal Tricks","text":""},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/#android-debug-bridge-adb","title":"Android Debug Bridge (ADB)","text":"<p>Before you can do anything in your bash terminal with Android, you must install the Android Debug Bridget(ADB). This is a set of command line tools that help you interface with Android devices</p>"},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/#installing-adb","title":"Installing ADB","text":"<p>To install ADB on Mac, Windows, or Linux. XDA has some pretty good instructions on how to do so in the following post. </p> <p>Since I am on a Mac you can utilize Homebrew to install ADB with the simple command <code>brew install android-platform-tools</code> which will allow you to use the ADB command from the terminal. </p>"},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/#bash-profile","title":"Bash Profile","text":"<p>If you are using Oh My ZShell, the one plugin that can be helpful to have handy is the adb plugin. Can be installed by adding <code>adb</code> to the list of plugins in the <code>.zshrc</code> file. </p> <ul> <li><code>plugins=(adb)</code></li> </ul> <p>Otherwise below are some useful bash functions and aliases I use on a daily basis. </p> <pre><code># Gradle\nalias gclean='./gradlew clean'\nalias gstop='./gradlew --stop'\nalias lapk='ls ./build/outputs/apk'\n\ndeeplink() {\n    adb shell am start -a android.intent.action.VIEW -d $1\n}\n\n#save all screenshots from android device to local folder on desktop\nalias screenshots='adb-sync -R /sdcard/Pictures/Screenshots/ ~/Pictures/android-screenshots'\n\n#take a screenshot\n#snap_screen will default to name screenshot-date.png\n#snap_screen \"test.png\" will create a screenshot with test.png as the name\nsnap_screen() {\n  if [ $# -eq 0 ]\n  then\n    name=\"screenshot-`date -u +'%Y%m-%dT%H:%M:%SZ'`.png\"\n  else\n    name=\"$1.png\"\n  fi\n  adb shell screencap -p /sdcard/$name\n  adb pull /sdcard/$name ~/Pictures/android-screenshots\n  adb shell rm /sdcard/$name\n  echo \"save to ~/Pictures/android-screenshots/$name\"\n}\n\n# Record and pull video\n# If you want a specific name call screen_record &lt;name of file&gt;\n# No name will default to screen-record-&lt;current date/time&gt;.mp4\nscreen_record(){\n  if [ $# -eq 0 ]\n  then\n    name=\"screen-record-`date -u +'%Y%m-%dT%H:%M:%SZ'`.mp4\"\n  else\n    name=\"$1.mp4\"\n  fi\n  echo \"Starting recording, press CTRL+C when you're done...\"\n  trap \"echo 'Recording stopped, downloading output...'\" INT\n  adb shell screenrecord --size 720x1280 --verbose \"/sdcard/$name\"\n  trap - INT\n  sleep 5\n  adb pull /sdcard/$name ~/Movies/android-screen-recording\n  echo \"$name saved to ~/Movies/android-screen-recording\"\n  sleep 1\n  adb shell rm /sdcard/$name\n  echo \"$name was removed from the device\"\n}\n\nenable_animations() {\n  adb shell settings put global window_animation_scale 1\n  adb shell settings put global transition_animation_scale 1\n  adb shell settings put global animator_duration_scale 1\n}\n\ndisable_animations() {\n  adb shell settings put global window_animation_scale 0\n  adb shell settings put global transition_animation_scale 0\n  adb shell settings put global animator_duration_scale 0\n}\n</code></pre>"},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/#terminal","title":"Terminal","text":""},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/#installing-apk-from-terminal","title":"Installing APK From Terminal","text":"<pre><code>adb install sample.apk\n</code></pre>"},{"location":"blog/2019/03/05/android-bash-profile-and-terminal-tricks/#using-adb-when-multiple-devices-connected","title":"Using ADB When Multiple Devices Connected","text":"<p>To first get the serial numbers of the devices connected to your PC, run the following adb command to print all connected Android devices. </p> <pre><code>adb devices\n</code></pre> <p>You should see the following output: </p> <pre><code>List of devices attached\nemulator-5554   device\nemulator-5556   device\n</code></pre> <p>Now you should be able to use the adb serial flag, <code>-s</code>, to specify which device to execute the command on. </p> <pre><code>## take a screenshot and save to device\nadb -s emulator-5554 shell screencap -p /sdcard/screenshot.png\n</code></pre>"},{"location":"blog/2019/05/26/build-what-you-need-not-what-yout-want---avoiding-analysis-paralysis/","title":"Build What You Need, Not What Yout Want - Avoiding Analysis Paralysis","text":"<p>I joined the professional world of developing in the year of 2018 and ever since I started I had aspirations of creating a blog to share the ideas and concepts I have learned with others. Some of the features I was looking for to make this blog that could provide a good user experience were the following: </p> <ul> <li>Accessible to everyone </li> <li>Usable on desktop or mobile</li> <li>Generate articles from my notes taken in Markdown - supporting photos, gifs, and embedded youtube videos</li> <li>A commenting system for each article to allow for user feedback</li> <li>Responsive user interface</li> <li>Search to find any article</li> </ul> <p>After compiling what looks like a lofty list of features, I set forth on analyzing the solutions out there that could help me accomplish this. </p> <p>When I first started, I had been developing Android apps and Google just announced Kotlin as a first class language for Android. I fell in love with Kotlin as it was a very powerful and modern language that helped developers be more productive. Kotlin has the potential of sharing code between different platforms by compiling the Kotlin code down to its respective target. So you could build out the core business logic in one commonn module for the front and backend, then you would just need to focus on building out the view layer for each respective platform you wanted to target. This sounded great, but the idea of building out three different view layers and learning a really new technology sounded like it was going to take years to build out all of the features I was looking for. </p> <p>Another solution that came out after my time working with Kotlin, was Flutter. Flutter has had a great story for Android and iOS apps being written in one codebase, but what interested me even more about it was the announcement to support the web. At the time I was assessing Flutter, I will admit from a design perspective it was absolutely beautiful. Flutter also allowed me to solve the problem Kotlin could not which was writing the code truly in one code base for the business logic and the view layer which was great since I'm a team of one. However being another new technology, there were still many libraries that needed to be built out or just didn't fully fulfill all of my requirements. So even though I learned a lot if I needed to build out a new app from scratch for a startup, this wasn't the right solution for the blog. </p> <p>My third solution was building a progressive web app using polymer web components. This started off really promising at first since there was a large number of packages already out there I could utilize for building out the blog. My only problem with this was that everything was written in Javascript which was a language I had used in college but never really enjoyed writing because of its inherent anarchy being dynamically typed. So since it was never something I didn't enjoy working on, it was hard for me to find the time to want to work on it. </p> <p>After wasting a lot of time looking at all of these different solutions, I was listening to the Fragmented podcast one day which started talking about analysis paralysis and even referenced the exact use case of mine building a blog. The advice that struck a chord for me was to avoid the developer analysis paralysis, otherwise that blog post you keep trying to write will never be seen if you keep trying to analyze the different technologies out there to showcase it. One of the technologies mentioned specifically for blogs was Jekyll which seemed like a good start, which eventually led me to the final solution of Material Mkdocs which checked every one of my requirements for the blog. The most important thing about this was that it allowed me to focus primarily on writing the content in just pure markdown which brought back the joy in working on the blog. </p> <p>Now I still plan on exploring these different technologies I've learned as they are things I truly enjoy working with and plan on writing about. In the meantime though for the sake of releasing this blog I have settled on the solution I needed, not the solution I wanted and dreamed of. You never know, maybe some day as each of these technologies progress I could migrate the blog to one of them. But for now, I have learned a hard lesson of breaking the analysis paralysis in my own personal projects and focus on engineering the right solution for the problem at hand while enjoying it at the same time!</p>"},{"location":"blog/2019/08/14/should-i-write-an-android-app-in-kotlin-or-java/","title":"Should I Write an Android App in Kotlin or Java?","text":"<p>In the world of native Android developing, the developer has the option to write an app in either Java or Kotlin. If you actually clicked on those two links, you might even be able to tell a lot about each language from first glance. Java has been around since 1995 which also seems like the last year the website may have been touched. Kotlin first appeared in 2011 with aspirations to becoming a modern language beloved by many developers and has a website to show for that. Android was born in 2008, so the original way to write Android apps between the two languages was Java. Kotlin did not receive official first class support for Android until Google IO in 2017 and has become a very popular way to build Android apps. </p> <p>Now when it comes to writing an Android app, I would say it really depends on an individuals background, team size, and teams background to know which language to learn. </p>"},{"location":"blog/2019/08/14/should-i-write-an-android-app-in-kotlin-or-java/#java","title":"Java","text":"<p>Being that Java used to be one of the only ways to write Android apps originally, the best part about learning Java is you have a plethora of resources in the community with answers to your problems in just that language. If you ever need to dive into some of the source code of widgets, this is what all of those are written in so you won't struggle trying to understand what is going on. </p> <p>Since Java has been around for so long, there are so many other technologies you can work with on the front end or backend. Also it is such a common programming language, it can be a great language to use when interviewing for big tech companies since a lot of people learned Java when they first started programming. </p> <p>Even though Java has fallen behind some other modern programming languages when it comes to features, Oracle has done a lot of work to catch up and is not going away anytime soon. Jake Wharton gave a great talk at Kotlin Conf posing an argument that Java can potentially be just as powerful as Kotlin as time progresses. </p> <p>Java is a great language for any developer to have in their back pocket, but it does have some shortcomings that can make it a frustrating language to work with. There is no notion of null safety, so before an object can ever be accessed there is always a null check that must be made to prevent crashing the app. Java is also a very verbose language and on average will find yourself writing 30% more lines than a language like Kotlin. If you plan on watching any developer talks from Google IO, you will find almost all of them now are delivered in Kotlin so it could be hard to follow. Newer Android libraries have Kotlin in mind first, so something like Jetpack Compose which is a declarative way to create Android UI would become significantly harder to ever use without writing that code in Kotlin. </p>"},{"location":"blog/2019/08/14/should-i-write-an-android-app-in-kotlin-or-java/#kotlin","title":"Kotlin","text":"<p>After two years of Kotlin being announced as a first class language for Android, it very quickly became one of the most popular languages that year causing a lot of excitement. Kotlin is a modern programming language, that will help you write code that is more concise, safe, and interoperable between many languages (Java, Javascript, and Native code). Almost all talks at Google IO are predominantly given in Kotlin now, so it can be much easier to follow the talks if you understand Kotlin. </p> <p>Even if you don't understand Java code, the Kotlin plugin will automatically convert any Java code into Kotlin when you copy paste it into Android Studio! So when you come across an answer on Stackoverflow that is written in Java, it is dead simple to convert it into Kotlin code for you to understand. The converter is pretty good at making Kotlin code that can compile, but is very bad at converting very verbose Java code into idiomatic Kotlin. This is where a deep understanding of Kotlin will help you clean up the verbose Kotlin code into idiomatic Kotlin. </p> <p>Some other great features in Kotlin that make it a pleasant language to write are null safety, type inference, and lambdas. Null pointer exceptions are still possible in Kotlin, but they are a lot harder to write because the compiler makes you really think about whether or not an object you are trying to access is null or not. The type inference allows you to write code quickly without being so concerned about what type that object may be as the compiler will infer the type for you. Lambda's can be a bit of a complicated concept, but after learning them, you will be able to write very pretty code and pass around functions as variables since functions are first class citizens in Kotlin. </p> <p>There are some weird quirks about Kotlin and Android that you probably would never know of unless you have encountered them. Such as not using default parameters when making custom Android views due to wrong constructors being called. Overall though, these quirks are few and far between which is why Kotlin has become such a popular language to develop Android apps in and Google is investing a lot of resources into making it a pleasant experience to write Android apps in. </p> <p>If you want to listen to a great talk from the lead designer of Kotlin as to why Kotlin is a better language than Java, watch the video below. </p>"},{"location":"blog/2019/08/14/should-i-write-an-android-app-in-kotlin-or-java/#what-should-i-learn","title":"What should I learn?","text":"<p>If you are brand new to developing Android apps and you will create a new project, I would recommend starting off learning Kotlin since you got a green field to play in. Although I wouldn't completely forget learning Java at some point, as this will help you better understand what the Kotlin compiler is targeting and this is what a lot of what AOSP is writtten in. </p> <p>Now if you plan on getting a job at an enterprise that has an established Android app, there is good chance that it could be written entirely in Java or is a mix of the two languages. Then in this scenario I would recommend learning both because you will find yourself constantly needing to interop between the two languages which will be invaluable in being more productive. </p> <p>If the team you plan on working with only knows Java, then I would recommend just learning Java. Even though Kotlin is a great language to learn, you also have to consider that the whole team will also have to learn Kotlin. So unless you plan on teaching everyone how to write Kotlin code, it would be more beneficial for you to work with what your team already knows and you could learn Kotlin in your spare time. </p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/","title":"Markdown Cheatsheet","text":"<p>Markdown is a shorthand syntax for writing highly stylized text. It can be a great tool when you are taking notes, documenting code, or even writing a site like this one. </p> <p>Below you will find a cheat sheat of all the different types of markdown text available for most markdown flavors, as well as some extensions utilized in this site. </p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#headerstitling","title":"Headers/Titling","text":"<p>To do headers and subtitles, use a <code>#</code>. One <code>#</code> is the largest, and adding another <code>#</code> continues to make the text smaller.  <pre><code>## H2 Header \n\n### H3 Header \n\n#### H4 Header \n</code></pre></p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#h2-header","title":"H2 Header","text":""},{"location":"blog/2020/01/20/markdown-cheatsheet/#h3-header","title":"H3 Header","text":""},{"location":"blog/2020/01/20/markdown-cheatsheet/#h4-header","title":"H4 Header","text":""},{"location":"blog/2020/01/20/markdown-cheatsheet/#text-styling","title":"Text Styling","text":"<pre><code>*Italicized text has its text surrounded by single stars*\n\n**Bold text has its text surrounded by double stars**\n</code></pre> <p>Italicized text has its text surrounded by single stars</p> <p>Bold text has its text surrounded by double stars</p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#bullets-and-numbers","title":"Bullets And Numbers","text":"<pre><code>* One bullet\n  * indented bullets have two spaces from its parent\n* second bullet\n\n1. Numbering can be done as well\n2. Just by using numers \n3. Which will indent the numbers \n</code></pre> <ul> <li>One bullet</li> <li>indented bullets have two spaces from its parent</li> <li> <p>second bullet</p> </li> <li> <p>Numbering can be done as well</p> </li> <li>Just by using numers </li> <li>Which will indent the numbers </li> </ul>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#block-quotes","title":"Block Quotes","text":"<pre><code>&gt; Block quotes just use a single caret to create an indented paragraph. \n</code></pre> <p>Block quotes just use a single caret to create an indented paragraph. </p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#coding","title":"Coding","text":"<pre><code>`SomeClass` - uses back ticks around classes and functions to indicate this is the exact name in code. \n\n    ```kotlin \n    // Code comments\n    val foo = \"bar\"\n    println(foo)\n    ```\n</code></pre> <p>Below are some sample styles for markdown code highlighting to be placed after the first three backticks. </p> <ul> <li>kotlin</li> <li>json</li> <li>bash</li> <li>java </li> <li>javascript </li> </ul> <p><code>SomeClass</code> - uses back ticks around classes and functions to indicate this is the exact name in code. </p> <pre><code>// Code comments\nval foo = \"bar\"\nprintln(foo)\n</code></pre>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#hyperlinking","title":"Hyperlinking","text":"<p>If you want to create blue text that hyperlinks to a website like Google, Surround the text to be shown in blue around brackets, and parantheses around the actual website link just like: <code>[Google](www.google.com)</code></p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#images","title":"Images","text":"<p>Images supported in markdown are png, jpg, and gif's. </p> <pre><code>![Sample Screenshot description](../../assets/images/sample.gif)\n</code></pre> <p><code>![The description that displays to the user when hovered over](relative path to image)</code></p> <p></p>"},{"location":"blog/2020/01/20/markdown-cheatsheet/#tables","title":"Tables","text":"<pre><code>|  1 |  2 | 3  | \n|---|---|---|\n| Fizz  | Buzz  | fizz | \n| fiz  |  buzz | buzz   |  \n</code></pre> 1 2 3 Fizz Buzz fizz fiz buzz buzz"},{"location":"blog/2020/01/20/markdown-cheatsheet/#jekyll-text-theme-markdown-enhancements","title":"Jekyll Text Theme Markdown Enhancements","text":""},{"location":"blog/2020/01/20/markdown-cheatsheet/#material-mkdocs-markdown","title":"Material Mkdocs Markdown","text":"<p>This site is generated by Jekyll Text Theme which has a little extra flavor of markdown to add even more styles that are missing in markdown. </p> <ul> <li>Jekyll Text Theme - Markdown Enhancements</li> </ul>"},{"location":"blog/2020/01/26/my-mac-developing-environment/","title":"My Mac Developing Environment","text":"<p>A list of all the different programs, packages, and tips for how I configure my Mac for development. </p>"},{"location":"blog/2020/01/26/my-mac-developing-environment/#installed-from-terminal","title":"Installed From Terminal","text":"<p>Home Brew - helps you install packages from the command line more easily similar to linux's package manager</p> <p>Git - version control system</p> <p>iTerm2 - terminal replacement</p> <p>Oh My ZShell - customize the terminal</p> <ul> <li>I use the <code>agnoster</code> theme. To change open up <code>~/.zshrc</code> file and change the following line </li> </ul> <pre><code>ZSH_THEME=\"agnoster\"\n</code></pre> <ul> <li>If the theme is not rendering properly in iTerm, then install Powerline fonts. Copy/paste the following to install. Then in iTerm preferences, check the option to <code>Use a differnt font for non-ASCII text</code> and switch the font to <code>Mesio LG L for powerline</code>. Screen shot</li> </ul> <pre><code># clone\ngit clone https://github.com/powerline/fonts.git --depth=1\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts\n</code></pre> <ul> <li>Oh My ZShell Plugins that I use - <code>plugins=(git adb vscode)</code><ul> <li>adb - Android Debug Bridge autocomplete plugin</li> <li>git - aliases and autocomplete for git</li> <li>vscode - aliases and autocomplete for visual studio code editor</li> </ul> </li> </ul>"},{"location":"blog/2020/01/26/my-mac-developing-environment/#downloadable-applications","title":"Downloadable Applications","text":"<p>Visual Studio Code - text editor and markdown editor</p> <ul> <li>to open files from the command line follow these instructions</li> <li><code>git config --global core.editor \"code --wait\"</code> - to configure git as the default editor</li> </ul> <p>Sourcetree - version control GUI for Git repositories</p> <p>Spectacle - window control management tool for Mac</p> <p>Android Studio - IDE for developing Android applications</p> <p>IntelliJ Idea - IDE that Android Studio was based off and I use for developing any Kotlin Multiplatform apps</p> <p>Drop to GIF - easy tool to convert videos to GIFs that I use for adding GIFs to pull requests</p> <p>Postgres.app - mac app that makes it dead simple to start up a PostgreSQL server</p>"},{"location":"blog/2020/01/26/my-mac-developing-environment/#bash-profile","title":"Bash Profile","text":"<p>Since I use Oh My ZShell, my bash profile is sourced from <code>.zshrc</code> file in my home directory as opposed to <code>.bash_profile</code>. My bash profile consists of a bunch of git aliases and helper functions for dealing with the Android SDK. For some Android specific bash profile functions &amp; aliases, check out Android Bash Profile and Terminal Tricks</p> <pre><code>alias edit_profile='code ~/.zshrc'\nalias source_profile='source ~/.zshrc'\n\nalias gs='git status'\nalias branches='git branch | cat'\nalias rbranches='git branch -r | cat'\nalias gamend='git commit --amend'\n\n# remove the user name and machine from the start of the terminal prompt\n# should only readout the current file name. \nexport DEFAULT_USER=\"$(whoami)\"\n\n# when ran from the root of a git repo, will take an argument for the branch name\n# will then check if your current work station is clean, if not you can type \"stash\" to stash them\n# or will do nothing and not checkout the branch\n# After finished reviewing code, hit enter and it will remove the code reviewed branch from your local machine \n# and checkout your existing branch\ncode_review() {\n  branch=$(git branch | sed -n -e 's/^\\* \\(.*\\)/\\1/p')\n  git diff-index --quiet HEAD\n  if [ $? = 1 ]; then\n    echo \"Branch: $branch is dirty, if you would like to stash your changes type stash\"\n    read input\n  if [ \"$input\" = \"stash\" ]; then\n    git stash\n    git fetch\n    git checkout $1\n    echo \"Hit enter when you are done reviewing this branch\"\n    read userInput\n    git reset --hard\n    git checkout $branch\n    git branch -d $1\n    git stash pop\n  else\n    echo \"Cool, nothing happened\"\n  fi;\n  else\n    git fetch\n    git checkout $1\n    echo \"Hit enter when you are done reviewing this branch\"\n    read userInput\n    git reset --hard\n    git checkout $branch\n    git branch -d $1\n  fi\n}\n</code></pre>"},{"location":"blog/2020/01/26/my-mac-developing-environment/#change-location-of-where-screenshots-get-saved","title":"Change Location of Where Screenshots Get Saved","text":"<p>Open up a terminal and enter the following two commands.</p> <pre><code>defaults write com.apple.screencapture location &lt;folder location&gt;\nkillall SystemUIServer\n</code></pre> <p>For me, I typically save any screenshots in <code>~/Pictures/screenshots</code>.</p> <p>Then if you would like even quicker access to your screenshots, I will click and drag that folder to the bottom right section of dock next to Downloads. </p> <p>Then whenever you take a screen shot, you will see it show up in your bottom toolbar. </p> <p>Just a reminder to take a screen shot of the whole screen, you can use the following command. </p> <p></p> <p>Then to take a screen shot of just a portion of the screen you can use: </p> <p></p>"},{"location":"blog/2020/03/02/physical-workspace/","title":"Physical Workspace","text":"<p>One aspect of a programmer's work that I think can get overlooked is the actual physical workspace where he or she works. Over the years I have invested a lot of time and effort into creating a home office that is ergonomic and promotes a workflow that works for me. By no means am I trying to tell everyone that...</p> <p></p> <p>and you shouldn't get anything else. But I do recommend that you invest in the similar items for each section listed to help create your own environment that will help you make yourself more productive.  </p>"},{"location":"blog/2020/03/02/physical-workspace/#desk","title":"Desk","text":"<p>For a desk, I highly recommend some sort of standing desk that can be adjusted throughout the day so you are not always sitting down the entire day. I personally have an Uplift V2 Standing Desk which has been a great investment. If you don't have the money for a standing desk, I have gone the cheapest route before with just a little Ikea end table I put on top of my desk that takes a minute to setup and just put my laptop on top of it. I cannot stress the importance of alternating between standing and sitting throughout the day to try to maintain your posture. </p> <p>In case you were interested in the Uplift standing desk, below is a video describing all of the different customizations that you can make to create a standing desk that works for you. I am not paid to praise their desks, just a happy customer of Uplift. </p>"},{"location":"blog/2020/03/02/physical-workspace/#keyboard","title":"Keyboard","text":"<p>Now when it comes to a keyboard, I have joined the cult of mechanical keyboards as I truly love the feel of every click of a key when typing. Mechanical keyboards are not for everyone, but when you are looking for a keyboard I recommend you at least look for an ergonomic keyboard to prevent yourself from getting carpal tunnel later down the road. For me personally I got the Ergodox EZ keyboard with brown mechanical switches. This is going to be a really hard keyboard for anybody to start using because you will feel like a novice trying to type on it for the first two weeks. After spending a considerable amount of time typing on it and configuring it to work with my flow. I can type just as fast, if not faster than I did on a normal keyboard and I'm doing it in an ergonomic way! </p> <p>Below is a video to from ergo dox about what its all about in a nut shell. </p> <p>If you're interested to see what my configuration is personally for the keyboard, check out my configurations on the ergo dox ez configurator which I have tried to optimize for a Mac/Windows setup. </p>"},{"location":"blog/2020/03/02/physical-workspace/#monitor","title":"Monitor","text":"<p>For a monitor, I recommend getting either dual monitors or one big curved monitor to give yourself the real estate for increased multitasking. I myself prefer the big curved monitor from an ergonomic standpoint because its equivalent to having one and a half monitors which helps reduce the strain on my neck from turning to far looking at a dual monitor setup. Some people prefer the dual monitor setup though, so wouldn't rule that out for yourself if that is what works for you. </p> <p>I personally got the 34'' Class 21:9 UltraWide\u00ae WQHD IPS Thunderbolt\u2122 Curved LED Monitor which may have been a bit of overkill, but I also game and wanted a monitor that would have a fast response time for that. If you are looking for another curved monitor that is just for work, there are plenty of other great options out there that are more affordable. </p>"},{"location":"blog/2020/03/02/physical-workspace/#chair","title":"Chair","text":"<p>The chair is one of the most important things to invest in since its where you're sitting most of the day. So make sure whatever you choose to get is comfortable and ergonomic to sit in all day. I personally got the Secret Lab Titan Gaming Chair and may have even splurged for the limited edition Batman version of the chair. Very happy with the quality and comfort from the Secret lab chair!</p>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/","title":"Create a Website with Github Pages","text":"<p>If you have a project, blog, or documentation that you need to have hosted in a site, Github Pages can be a great way to host your site for free straight from the repository. </p> <p>Since this website itself was made with Material MkDocs, this tutorial will explain how to build and deploy a static website to Github Pages using that. </p>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#install-python","title":"Install Python","text":"<p>MkDocs is built using Python, so we will need to install Python first in order to build and run anything. Since Macs by default have Python 2 installed, we will need to install Python 3 to use MkDocs. The easiest way to install Python 3 is with Homebrew. </p> <pre><code>brew install python\n</code></pre> <p>Once installed, you should be able to verify this by running the following command to see the version number. </p> <pre><code>$ python3 -V\nPython 3.7.7\n</code></pre> <p>If you wish to use the <code>python</code> command in the terminal and have it reference the <code>python3</code> version. Following this article, we can create an alias in your bash profile that will reference the <code>python3</code> version. First get the path of where <code>python3</code> was installed. </p> <pre><code>$ which python3\n/usr/local/bin/python3\n</code></pre> <p>Now add an alias to your bash profile file that will now make any <code>python</code> command in the terminal point to the <code>python3</code> version instead of Mac default of <code>python2</code>. </p> <pre><code>alias python=/usr/local/bin/python3\n</code></pre> <p>After sourcing your bash profile with the new alias, you should now be able to just use <code>python</code> in the terminal instead <code>python3</code>. </p>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#download-and-install-material-mkdocs","title":"Download and Install Material MkDocs","text":""},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#using-github","title":"Using Github","text":"<p>The easiest way to get running is to fork the repository from Github and then clone that repository to your machine. </p> <p></p> <p>Now in order to access your website in the public space in the end, we must rename the repository to <code>&lt;username&gt;.github.io</code> in order to work with the default domain given for free from Github Pages. Go to the settings of your repository, and rename the repo with your username replaced. </p> <p></p> <p>Now we can clone the repository to our local machine with git. </p> <p>Note</p> <p>I am using the the SSH urls when cloning, you could just as easily use the https urls. If you have not set that up in git and wish to learn how, checkout how to use SSH.</p> <p><code>git clone https://github.com/squidfunk/mkdocs-material.git</code></p> <pre><code>git clone git@github.com:plusmobileapps/plusmobileapps.github.io.git\n</code></pre>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#enterprise-github","title":"Enterprise Github","text":"<p>In case you are working with an enterprise instance of Github that has a different domain and is not publicly accessible without some form of authentication. Then just go ahead and clone the Material MkDocs repository directly and add your enterprise's remote url. </p> <pre><code>git clone git@github.com:squidfunk/mkdocs-material.git\ngit remote add enterprise https://enterprise.repo.forforking.com/user/repo.git\ngit push enterprise master\n</code></pre>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#running-material-mkdocs-locally","title":"Running Material MkDocs Locally","text":"<p>First install all of the Material MkDocs dependencies with Python's package manager, <code>pip</code>. </p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Then to run the server, you can run the following command on the <code>mkdocs</code> python module. </p> <pre><code>python -m mkdocs serve\n</code></pre> <p>Open up your browser and navigate to <code>http://127.0.0.1:8000/</code> and you should now see the landing page for your Material MkDocs site. </p> <p></p> <p>Note</p> <p>If you run into an error when running the command above with the following</p> <pre><code>MkDocs encountered as error parsing the configuration file: while constructing a Python object\ncannot find module 'materialx.emoji' (No module named 'materialx')\n</code></pre> <p>Then comment out the following lines in the <code>mkdocs.yml</code> file since you probably don't need the emoji dependency right away. </p> <pre><code># - pymdownx.emoji:\n#     emoji_index: !!python/name:materialx.emoji.twemoji\n#     emoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#deploying-your-site-to-github-pages","title":"Deploying Your Site To Github Pages","text":""},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#deploying-to-github","title":"Deploying to Github","text":"<p>To access your site publicly from any broswer, we can now deploy it with the following command. </p> <pre><code>python -m mkdocs gh-deploy\n</code></pre> <p>Be sure that the repository settings is configured for Github Pages to be built off of the <code>gh-pages</code> branch as this is the default branch MkDocs will deploy to. </p> <p></p> <p>If you are creating a personal Github Pages website for your username and do not see the option to switch the branch. This is because it must be built off of master which is an easy fix to deploy to. </p> <p></p> <p>From the master branch, checkout a new branch and call it <code>develop</code> then push it to Github. Now you can configure MkDocs to deploy to the <code>master</code> branch instead of the default <code>gh-pages</code> branch. </p> <pre><code>git checkout -b develop \ngit push origin develop\npython3 -m mkdocs gh-deploy -b master\n</code></pre>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#deploying-to-github-enterprise","title":"Deploying to Github Enterprise","text":"<p>To deploy to your enterprise instance of Github, you must make use of the remote flag to tell MkDocs that it should deploy to the <code>gh-pages</code> branch on your remote repository.  </p> <pre><code>python -m mkdocs gh-deploy -r myfork\n</code></pre> <p>The easiest way to figure out your url for you enterprise Github Pages site is to go to the repository's settings, and go down to the Github Pages section to see where it was published. </p> <p></p>"},{"location":"blog/2020/05/06/create-a-website-with-github-pages/#configure-custom-domain-for-github-pages","title":"Configure Custom Domain for Github Pages","text":"<p>Managing Custom Domain - Github Docs</p> <p>Dev.to article for configuring Github Pages with custom domain on Google Domains. </p> <p>Deploying MkDocs CNAME - adding a CNAME file in the docs folder that contains the domain name that was used in the custom domain field in the repository settings will allow the <code>mkdocs gh-deploy</code> command from wiping out the CNAME file in the master branch. </p> <p></p> <p>If you happen to get the following warning when updating the custom domain in your Github repository settings. I found out there was another repository on my account that had the custom domain already setup and deleting that custom domain on the other repository fixed my issue. </p> <p></p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/","title":"How to build a Slackbot with Kotlin","text":"<p>One day at my day job, I noticed that there were a couple of services we used that anytime an event happened there was a very manual process for the developer to copy paste data into a Slack channel for others to be aware of the issue. I thought there had to be a better way to automate this whole process and prevent a developer from having to do this tedious task. That was when I came up with the idea of creating a Slackbot application to do this. So in this article I will describe the process I went through to create a Slackbot using Ktor and webhooks that can post messages to your Slack channel of choice and how to deploy to Heroku. For this example, we will be using Github webhooks to supply data to our Slackbot but the same principal applies to your service of choice that offers webhooks. </p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#setup","title":"Setup","text":""},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#initialize-project","title":"Initialize Project","text":"<ol> <li>First download IntelliJ IDEA CE and install for your development platform. </li> <li>Once installed, click configure -&gt; plugins. Then search and install the Ktor plugin. </li> </ol> <ol> <li>Create a new project and select Ktor in the side bar. For the sake of this tutorial, we are going to use the GSON library for JSON serialization. But this is swappable with other JSON serializers of your choosing. </li> </ol> <p>After giving your project a name and finishing the setup, you should be able to run the project with the following command and open up your browser to http://0.0.0.0:8080. </p> <pre><code>gradle run\n</code></pre> <p></p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#create-a-slack-bot-app","title":"Create a Slack Bot App","text":"<p>Go to Slack's API website and create a new app. Give a name for your bot and the workspace that this bot will have access to. </p> <p></p> <p>Under OAuth and Permissions, we need to give our bot the permission to write to our Slack channels so go ahead and add the following permission. </p> <p></p> <p>At the top of this page, you should now be able to install this bot to your workspace. </p> <p></p> <p>Now that you have installed the bot to the workspace, it should land you back on OAuth and Permissions page with a token that we will use later to authenticate with our Slack instance to post messages. This key should be kept private and not checked into any repository which we will discuss in a bit how to keep this secret. </p> <p></p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#add-java-slack-sdk","title":"Add Java Slack SDK","text":"<p>Now we will add the Java Slack SDK to our project. First open up the <code>build.gradle</code> file, and add the following three lines to the dependencies block. </p> <pre><code>    implementation \"com.slack.api:slack-api-client:$slack_version\"\n    // Add these dependencies if you want to use the Kotlin DSL for building rich messages\n    implementation \"com.slack.api:slack-api-model-kotlin-extension:$slack_version\"\n    implementation \"com.slack.api:slack-api-client-kotlin-extension:$slack_version\"\n</code></pre> <p>Then in <code>gradle.properties</code> we can create the variable for the version. </p> <pre><code>slack_version=1.2.1\n</code></pre> <p>Now sync gradle and the Slack Java SDK should be accessible. If you have any trouble setting this up, the official instructions from Slack can be found here.</p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#posting-messages","title":"Posting Messages","text":"<p>Before we can post any messages, lets now add the Slack bot token to our project as an environment variable since you should never be checking in api tokens directly to your repository. Click on the gradle configuration in the top toolbar, and edit configurations. Then click on the right icon of environment variables and click the plus button to add an environment variable. </p> <p></p> <p>Our bot doesn't have permissions to join channels, so to prevent the <code>not_in_channel</code> error add the bot by @ it in the slack channel you want to post a message to. <code>@Plus Mobile Apps Slack Bot</code> in the <code>#general</code> channel. </p> <p>To create a simple message, lets create a new file called <code>HomeRoute</code>. Here we will create an extension function on <code>Route</code> which will post a simple message anytime the home page is retrieved. </p> <pre><code>fun Routing.homeRoute() {\n    get(\"/\") {\n        val token = System.getenv(\"SLACK_TOKEN\")\n        val slack = Slack.getInstance()\n        val response = slack.methods(token).chatPostMessage {\n            it.channel(\"#general\")\n                .text(\"Hello :wave:\")\n        }\n        call.respondText(\"Response is: $response\")\n    }\n}\n</code></pre> <p>Don't forget to add this function to your routes on the <code>Application.kt</code> file. </p> <pre><code>fun Application.module(testing: Boolean = false) {\n    routing {\n        homeRoute()\n    }\n}\n</code></pre> <p>Now run the gradle configuration in IntelliJ and go <code>http://0.0.0.0:8080</code>. This route should now trigger a message being sent to the general channel. </p> <p></p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#deploy-to-heroku","title":"Deploy to Heroku","text":"<p>If you don't have a Heroku account yet, go to the website and create one. Once signed in, create a new app in the top right and give it a name of your choice. Then you will need to install the Heroku CLI in order to push your code. Now login to your Heroku account through the CLI and add the Heroku git remote. (This name should be under the deploy tab on Heroku if you forget the name of of your app.)</p> <pre><code>heroku login\nheroku git:remote -a ktor-slack-bot\n</code></pre> <p>Now go into the settings of your Heroku app and we will add the Slack token from earlier. </p> <p></p> <p>Heroku itself is not always going to run on port 8080 and actually passes this port number as an environment variable, so the application needs to be tweaked to take a <code>PORT</code> variable. </p> <pre><code>fun main(args: Array&lt;String&gt;) {\n    val port = System.getenv(\"PORT\").toIntOrNull() ?: 8080\n    embeddedServer(Netty, port) {\n        routing {\n            homeRoute()\n        }\n    }.start(wait = true)\n}\n</code></pre> <p>Now in the <code>build.gradle</code> file, the entry point to the app needs to be updated with the <code>mainClassName</code>. We are also going to add two more tasks while we are here called <code>jar</code> and <code>stage</code>. Jar will package the app into an executable file and stage is needed by Heroku which is run when deploying your app. </p> <pre><code>mainClassName = \"com.plusmobileapps.ApplicationKt\"\n\njar {\n    manifest {\n        attributes 'Main-Class' : \"com.plusmobileapps.ApplicationKt\"\n    }\n    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }\n}\n\ntask stage {\n    dependsOn jar\n}\n</code></pre> <p>Next, there is a special file we will make in the root of our project called <code>Procfile</code>, this is what tells Heroku how to run our app once it is deployed. Add the following to this file which will run the jar file that is generated from the stage task. </p> <pre><code>web: java -jar ./build/libs/slackbot-0.0.1.jar\n</code></pre> <p>To run Heroku locally, create a <code>.env</code> file in the root of the project folder where we will specify the <code>SLACK_TOKEN</code> and <code>PORT</code> variables. Don't forget to add the <code>.env</code> file to your <code>.gitignore</code> file to avoid checking in your secrets to your version control.  </p> <pre><code>SLACK_TOKEN=your-token-here\nPORT=8080\n</code></pre> <p>Then run the stage task and Heroku local command. </p> <pre><code>gradle stage\nheroku local\n</code></pre> <p>After validating everything is working locally, now you can finally deploy your Slackbot to Heroku by pushing it to the Heroku remote which will kick off the stage task. The url where your app is deployed will be printed in the console at the end of the deployment. So for this app, if you type <code>https://ktor-slack-bot.herokuapp.com/</code> into your browser you will kick off the simple message to the #general channel from the Slackbot. </p> <pre><code>git push heroku master\n\nEnumerating objects: 10, done.\nCounting objects: 100% (10/10), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 782 bytes | 782.00 KiB/s, done.\nTotal 6 (delta 3), reused 0 (delta 0)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----&gt; Gradle app detected\nremote: -----&gt; Installing JDK 1.8... done\nremote: -----&gt; Building Gradle app...\nremote: -----&gt; executing ./gradlew stage\nremote:\nremote:        &gt; Task :compileKotlin\nremote:        w: /tmp/build_c370990d/src/Application.kt: (16, 24): Parameter 'testing' is never used\nremote:\nremote:        &gt; Task :compileJava NO-SOURCE\nremote:        &gt; Task :processResources\nremote:        &gt; Task :classes\nremote:        &gt; Task :inspectClassesForKotlinIC\nremote:        &gt; Task :jar\nremote:        &gt; Task :stage\nremote:\nremote:        BUILD SUCCESSFUL in 21s\nremote:        4 actionable tasks: 4 executed\nremote: -----&gt; Discovering process types\nremote:        Procfile declares types -&gt; web\nremote:\nremote: -----&gt; Compressing...\nremote:        Done: 67.9M\nremote: -----&gt; Launching...\nremote:        Released v5\nremote:        https://ktor-slack-bot.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/ktor-slack-bot.git\n + 6032313...ab7fa93 master -&gt; master (forced update)\n</code></pre> <p>All of the changes needed to deploy can be found in this commit. </p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#listen-for-web-hooks-to-post-messages","title":"Listen for web hooks to post messages","text":"<p>The application until this point is pretty simple, but now that the application is deployed there is a URL you can use to register for web hooks. For this example, we will use Github web hooks from this repository which you can register in the settings section of the repository -&gt; web hooks.</p> <p></p> <p>To test what data this endpoint will be receiving, I use a service called Beeceptor which will set up an endpoint of your choice and will display the JSON that is sent from the webhook. After creating an endpoint on Beeceptor, register the url from Beeceptor as a webhook for the repository in order to see what JSON is sent in the payload. When you are first setting up a Github webhook, there are two requests that will be sent. </p> <ol> <li>Ping - sent when the webhook is first setup correctly</li> <li>Push - sent whenever a commit is pushed to the repository</li> </ol> <p>Both of these JSON payloads are saved into the json/ folder of the repository. </p> <p>Now create a new route in the application that will receive the webhook event, deserialize the JSON, and then post a message to Slack with the information we want. <code>GithubPushEvent</code> is just the JSON from the payload represented as a Kotlin class. Do not forget to add this extension function to your <code>Application#route</code> block. </p> <pre><code>fun Route.githubWebhookRoute() {\n     post(\"kotlin-slackbot-github\") {\n         val request = call.receive&lt;GithubPushEvent&gt;()\n\n         val token = System.getenv(\"SLACK_TOKEN\")\n         val slack = Slack.getInstance()\n         val response = slack.methods(token).chatPostMessage {\n             it.channel(\"#general\")\n                 .text(\"\"\"\n                     New commit pushed to `${request.repository.full_name}` by ${request.pusher.name}\n                     &gt; ${request.head_commit.message}\n                     ${request.head_commit.url}\n                 \"\"\".trimIndent())\n         }\n         call.respondText(\"Response is: $response\")\n     }\n }\n</code></pre> <p>To test locally, run the application and use your tool of choice to send a post request. I use Postman and send the post request to the application's local host with the JSON payload saved earlier from the push event. </p> <p></p> <p>After everything is working locally, go ahead and deploy to Heroku. The end result of the message posted to Slack whenever a commit is pushed to the repository!</p> <p></p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#prevent-blocking-thread","title":"Prevent blocking thread","text":"<p>Before we are done, if you look closely at the posting of the message there is a warning from the IDE that there is an inappropriate blocking method call. Since Ktor uses coroutines, the easiest solution to fix this is to simply move this call off of the original thread using <code>withContext()</code> and indicating which Dispatcher this should be run on.  </p> <p></p> <pre><code>fun Route.githubWebhookRoute() {\n    post(\"kotlin-slackbot-github\") {\n        ...\n        val responses = mutableListOf&lt;Any&gt;()\n\n        withContext(Dispatchers.IO) {\n            val response = slack.methods(token).chatPostMessage {\n                it.channel(\"#kotlin-slackbot\")\n                    .text(\n                        \"\"\"\n                    New commit pushed to `${request.repository.full_name}` by ${request.pusher.name}\n                    &gt; ${request.head_commit.message}\n                    ${request.head_commit.url}\n                \"\"\".trimIndent()\n                    )\n            }\n            responses.add(response)\n        }\n\n        call.respondText(\"Response is: $responses\")\n    }\n}\n</code></pre> <p>Now the warning is gone and the application will no longer be blocking the main thread when the endpoint is hit. </p>"},{"location":"blog/2020/10/09/how-to-build-a-slackbot-with-kotlin/#conclusion","title":"Conclusion","text":"<p>In conclusion, we have created a Slack application using Kotlin, Ktor, and Heroku that can listen to webhook events and post messages to our Slack. Everything done here can be found in the Github repository. We just scratched the tip of the iceberg in this article, but the Slack API is very powerful and encourage you to explore all of the different methods you can use to create a powerful Slackbot. Happy coding!</p>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/","title":"How to test a custom Android view with Robolectric","text":"<p>Working at an enterprise that needs a custom component library with each component being its own snow flake and having more complicated logic than the next. I found myself needing a way to test the logic in these views to ensure I could iterate quickly and not break anything in the process. </p> <p>Having a lot of prior experience unit testing business logic at the presentation and domain layer, it was always best practice to remove all Android references as this can be very tricky to mock. So testing the logic in an Android view was somewhat foreign to me, until I came across a medium article that had a very simple example of how this could be achieved with Robolectric by asserting the text in <code>TextView</code>. So in this post I will try to expand on this concept with a slightly more complex example and give some tips for utilizing Kotlin to write more idiomatic tests. </p> <p>At the time this post was written, Jetpack Compose was only in the alpha stage which provides a more robust solution for building and testing custom components. Enterprises like stable things though, so that's what this post will describe and encourage you to check out compose if it is stable or you want to be on the bleeding edge of technology. </p>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#create-a-components-library","title":"Create a Components Library","text":"<p>If you don't plan on splitting up your custom components into a separate module, then skip ahead to the next section. If you are wanting to achieve separation of concerns and encapsulate the dependencies of your custom views, then we will need to create a new library module. </p> <p>You can create a new module under <code>File -&gt; New -&gt; New Module...</code> and select Android library. Give the module a name and select finish. </p> <p></p> <p>Then in the <code>app/build.gradle</code>, you will need to add this module to the dependencies so that custom view can be accessed from the Android app module. </p> <pre><code>dependencies {\n    implementation project(':plusmobileappsui')\n}\n</code></pre> <p>Everything else should have been auto generated when you created the library module and can move onto making the custom view. All the work for this section can be found in this commit.</p>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#create-a-custom-android-view","title":"Create a Custom Android View","text":"<p>The component that will be built is a material card which has a lock button, text description, and a background ripple that is only active when the card is unlocked. </p> <p></p> <p>I am not going to go into great detail of how this custom view itself was built to focus more on the testing side of the view. The official Android documentation has a great tutorial for how to create a custom Android view if you want to learn more about how to do that. Otherwise you can see all the code needed for creating this custom view in this commit. Only useful things to know for testing later is the name of the view, <code>MyCustomView</code>, and the xml attributes as we will be injecting them into the constructor of the Robolectric tests. </p> <pre><code>&lt;resources&gt;\n     &lt;declare-styleable name=\"MyCustomView\"&gt;\n         &lt;attr name=\"isLocked\" format=\"boolean\" /&gt;\n         &lt;attr name=\"unlockLabel\" format=\"string\"/&gt;\n         &lt;attr name=\"lockLabel\" format=\"string\"/&gt;\n     &lt;/declare-styleable&gt;\n &lt;/resources&gt;\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#writing-robolectric-tests","title":"Writing Robolectric Tests","text":""},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#setup-robolectric-in-project","title":"Setup Robolectric in Project","text":"<p>In the module where your custom view is, add the following to the <code>build.gradle</code> in order to run Robolectric tests. </p> <pre><code>android {\n  testOptions {\n    unitTests {\n      includeAndroidResources = true\n    }\n  }\n}\n\ndependencies {\n  testImplementation 'org.robolectric:robolectric:4.4'\n}\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#setup-robolectric-test","title":"Setup Robolectric Test","text":"<p>The quickest way to create a test is opening up <code>MyCustomView</code>, pressing <code>ctrl + enter</code> to bring up the <code>Generate</code> menu and select <code>Test..</code>. </p> <p></p> <p>Android studio should auto generate the name, click on finish and make sure to select the <code>test</code> folder and not the <code>androidTest</code> folder since Robolectric can run locally on your machine. </p> <p></p> <p>Now in our test class, we need to annotate our test with the Robolectric test runner and can create a setup function to instantiate the view with the context of an <code>Activity</code> from Robolectric. </p> <pre><code>@RunWith(RobolectricTestRunner::class)\n@Config(sdk = [Build.VERSION_CODES.O_MR1]) //needed unless you run your tests with java 9\nclass MyCustomViewTest {\n\n    private lateinit var myCustomView: MyCustomView\n    private lateinit var rootView: ConstraintLayout\n    private lateinit var lockButton: ImageButton\n    private lateinit var lockDescription: TextView\n\n    @Before\n    fun setUp() {\n        val activityController = Robolectric.buildActivity(Activity::class.java)\n        val activity = activityController.get()\n        myCustomView = MyCustomView(activity, attributeSet)\n        rootView = myCustomView.findViewById(R.id.custom_view_root)\n        lockButton = myCustomView.findViewById(R.id.lock_button)\n        lockDescription = myCustomView.findViewById(R.id.lock_status_description)\n    }\n\n }\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#assert-text-on-textviews","title":"Assert Text on TextViews","text":"<p>Asserting text on <code>TextView</code>'s is pretty straight forward by just using Junit's basics <code>assertEquals</code>. Writing an extension function on <code>TextView</code> itself will also help writing this assertion more fluently. </p> <pre><code>fun TextView.assertText(expected: String) {\n   assertEquals(expected, this.text)\n}\n\n@Test\nfun `check lock text description`() {\n    lockDescription.assertText(\"Some expected text\")\n}\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#assert-image-drawables","title":"Assert Image Drawables","text":"<p>Lets write a simple test now that will just assert a specific drawable is set on the <code>ImageButton</code> in our custom view as this is supposed to change when it is toggled. Robolectric has a function that will allow us to to check the resource id that a drawable was created from called <code>shadowOf(yourDrawable).createdFromResId</code>. </p> <pre><code>@Test\nfun `check default unlocked state of image button`() {\n    assertEquals(R.drawable.ic_lock_open24px, shadowOf(lockButton.drawable).createdFromResId)\n}\n</code></pre> <p>Since <code>ImageButton</code> extends <code>ImageView</code>, we can write another extension function on <code>ImageView</code> to clean up the syntax for asserting an image drawable on the lock button. </p> <pre><code>fun ImageView.assertDrawableResource(@DrawableRes expected: Int) {\n    assertEquals(expected, shadowOf(this.drawable).createdFromResId)\n}\n\n@Test\nfun `check default unlocked state of image button`() {\n    lockButton.assertDrawableResource(R.drawable.ic_lock_24px)\n}\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#pass-custom-attributes-to-view","title":"Pass Custom Attributes to View","text":"<p>Robolectric has an <code>AttributeSetBuilder</code> that we can add our custom view attributes to and  pass as the second argument to the view's constructor. We will get rid of the <code>@Before</code> annotation on our setup function and will call this manually before each test so the initial default locked state can be configured for each test. </p> <pre><code>    private val expectedUnlockText = \"some unlock text\"\n    private val expectedLockText = \"some locked text\"\n\n    private fun setUp(isLocked: Boolean) {\n        ...\n        val attributeSet = with(Robolectric.buildAttributeSet()) {\n            addAttribute(R.attr.unlockLabel, expectedUnlockText)\n            addAttribute(R.attr.lockLabel, expectedLockText)\n            addAttribute(R.attr.isLocked, isLocked.toString())\n            build()\n        }\n        myCustomView = MyCustomView(activity, attributeSet)\n    }\n\n    @Test\n    fun `toggle lock - should be locked`() {\n        setUp(isLocked = false)\n        myCustomView.toggleLock()\n        lockDescription.assertText(expectedLockText)\n        lockButton.assertDrawableResource(R.drawable.ic_lock_24px)\n    }\n</code></pre> <p>One trick to clean up the builder function is to create our own function that has a parameter which is a function with a receiver. This will allow any attributes to be applied to the builder before building the <code>AttributeSet</code> avoiding the need to ever call the <code>build()</code> function directly in tests.  </p> <pre><code>fun buildAttributeSet(attrs: AttributeSetBuilder.() -&gt; Unit): AttributeSet {\n    return with(Robolectric.buildAttributeSet()) {\n        attrs()\n        build()\n    }\n}\n\nprivate fun setUp(isLocked: Boolean) {\n    val attributeSet = buildAttributeSet {\n        addAttribute(R.attr.unlockLabel, expectedUnlockText)\n        addAttribute(R.attr.lockLabel, expectedLockText)\n        addAttribute(R.attr.isLocked, isLocked.toString())\n    }\n    myCustomView = MyCustomView(activity, attributeSet)\n}\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#testing-view-listeners","title":"Testing View Listeners","text":"<p>Most views have some kind of listener when states are changed and in the instance of <code>MyCustomView</code>, it has a listener that is triggered when ever the user changes the lock state. So in order to write this kind of test, a mocking library is needed and we will use Mockk to make these verifications. </p> <p>Add Mockk to your module's dependencies: </p> <pre><code>dependencies {\n    testImplementation \"io.mockk:mockk:1.10.3-jdk8\"\n}\n</code></pre> <p>Create a mocked lambda in the test and have it return <code>Unit</code> anytime it is invoked in our <code>setup()</code> function. Then you can set the listener on the custom view and write the toggle listener test. </p> <pre><code>    private val lockedListener: (Boolean) -&gt; Unit = mockk()\n\n    private fun setUp(isLocked: Boolean) {\n        every { lockedListener(any()) } returns Unit\n\n        myCustomView.onLockListener = lockedListener\n    }\n\n    @Test\n    fun `lock listener invoked - initial false then toggled to true`() {\n        setUp(isLocked = false)\n\n        myCustomView.toggleLock()\n\n        verify { lockedListener(true) }\n    }\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#testing-background-drawables","title":"Testing Background Drawables","text":"<p>One requirement that was set for this custom view is that when the view is locked it should only be unlocked by clicking on the lock button itself and not whole card. This can be achieved by removing the ripple on the background drawable to indicate to the user it is not clickable and verifying that our toggle listener is not invoked with Mockk. </p> <pre><code>fun View.assertBackground(@DrawableRes expected: Int) {\n    assertEquals(expected, shadowOf(this.background).createdFromResId)\n}\n\n    @Test\n    fun `root shouldn't have ripple when locked and only unlock with image button`() {\n        setUp(isLocked = true)\n\n        myCustomView.performClick()\n        lockButton.assertDrawableResource(R.drawable.ic_lock_24px)\n        rootView.assertBackground(android.R.color.white)\n        verify(exactly = 0) { lockedListener(any()) }\n\n        lockButton.performClick()\n        rootView.assertBackground(R.drawable.my_custom_ripple)\n        lockButton.assertDrawableResource(R.drawable.ic_lock_open_24px)\n        verify { lockedListener(false) }\n\n        myCustomView.performClick()\n        rootView.assertBackground(android.R.color.white)\n        lockButton.assertDrawableResource(R.drawable.ic_lock_24px)\n        verify { lockedListener(true) }\n    }\n</code></pre>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#passing-drawables-through-attributeset","title":"Passing Drawables through AttributeSet","text":"<p>This would probably be overkill for this custom view, but if you ever wanted to pass any drawable resource through the custom view attributes I thought it would be worth mentioning how to do this as it may help generalize how to pass anything through the <code>AttributeSetBuilder</code>. First add the new attributes to the custom view styleable and use the attributes on <code>MyCustomView</code>.   </p> <pre><code>&lt;resources&gt;\n    &lt;declare-styleable name=\"MyCustomView\"&gt;\n        &lt;attr name=\"lockedIcon\" format=\"reference\"/&gt;\n        &lt;attr name=\"unlockedIcon\" format=\"reference\"/&gt;\n    &lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre> <pre><code>    &lt;com.plusmobileapps.plusmobileappsui.MyCustomView\n        ...\n        app:lockedIcon=\"@drawable/ic_lock_24px\"\n        app:unlockedIcon=\"@drawable/ic_lock_open_24px\" /&gt;\n</code></pre> <p>Since the only value that can be added as an attribute to the builder is a string, you actually need to pass the exact string used to declare the drawable used in the custom view declaration. </p> <pre><code>val attributeSet = buildAttributeSet { \n    addAttribute(R.attr.lockedIcon, \"@drawable/ic_lock_24px\")\n    addAttribute(R.attr.unlockedIcon, \"@drawable/ic_lock_open_24px\")\n}\n</code></pre> <p>So as a general rule of thumb, anything that needs to be added to the builder is the exact string you would use if you were to declare it in xml. </p> <p>All of the work needed to add this functionality can be found in this commit.</p>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#conclusion","title":"Conclusion","text":"<p>As we come to the end of this post, I hope you learned how to use Robolectric to unit test the logic in a custom Android view in a variety of different scenarios. Robolectric is a great tool in any Android developers tool set unlocking the ability to test Android locally on your machine without needing to run a slow instrumented test with Espresso. There are a lot of other things Robolectric can be used for when testing Android and we just touched the tip of the iceberg in this post. So I encourage you to explore the <code>Robolectric</code> class to see what else is possible. Happy coding!</p>"},{"location":"blog/2020/12/14/how-to-test-a-custom-android-view-with-robolectric/#source-code","title":"Source code","text":"<ul> <li>Github Repository </li> <li><code>MyCustomViewTest</code></li> <li><code>MyCustomView</code> </li> </ul>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/","title":"Surviving Android Process Death With SavedStateFlow","text":"<p>I was perusing Reddit the other day when someone asked how they could use <code>SavedStateHandle</code> with a <code>StateFlow</code> similar to the <code>SavedStateHandle.getLiveData()</code> version. The most upvoted comment originally was saying that this functionality is not officially supported, but one could convert the <code>LiveData</code> to a <code>Flow</code> using the <code>LiveData.asFlow()</code> extension function. That seemed pretty simple for anyone to do, however testing that would then require using <code>LiveData</code> in your tests which might be annoying if you were using <code>StateFlow</code> to manage state. So after looking over the API, it seemed pretty simple to write a wrapper that could expose this functionality directly as a <code>StateFlow</code> and that is how the SavedStateFlow library was made!</p>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/#savedstateflow-api","title":"SavedStateFlow API","text":"<p>At its core, the API for <code>SavedStateFlow</code> is very simple as it's supposed to be similar to a <code>MutableStateFlow</code>. There is a <code>value</code> property that can be mutated and a method that can expose it as a <code>StateFlow</code>. </p> <pre><code>interface SavedStateFlow&lt;T&gt; {\n\n    var value: T\n\n    fun asStateFlow(): StateFlow&lt;T&gt;\n\n}\n</code></pre> <p>The implementation detail of this interface will simply delegate value changes to the <code>SavedStateHandle</code> and will observe any value changes from the <code>SavedStateHandle.getLiveData()</code> function. Then the initial value for the <code>SavedStateFlow</code> will first be retrieved by the <code>SavedStateHandle</code> and if one does not exist then it will default to the one provided by yourself. </p>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/#how-to-create-a-savedstateflow","title":"How to create a SavedStateFlow?","text":"<p><code>SavedStateFlow</code> is just an interface, so how does one create an instance of one? Well since <code>SavedStateHandle</code> can't create this, there is a new wrapper called <code>SavedStateFlowHandle</code>. The library includes an extension function on <code>SavedStateHandle</code> to create a reference to a <code>SavedStateFlowHandle</code>. </p> <pre><code>val savedStateHandle: SavedStateHandle = TODO() \n\nval savedStateFlowHandle: SavedStateFlowHandle = \n    savedStateHandle.toSavedStateFlowHandle()\n</code></pre> <p>Now this new <code>SavedStateFlowHandle</code> provides two new functions on top of the original <code>SavedStateHandle</code> API. </p> <pre><code>interface SavedStateFlowHandle {\n\n    @MainThread\n    fun &lt;T&gt; getSavedStateFlow(\n        viewModelScope: CoroutineScope,\n        key: String,\n        defaultValue: T\n    ): SavedStateFlow&lt;T&gt;\n\n    @MainThread\n    fun &lt;T&gt; getFlow(key: String): Flow&lt;T&gt;\n\n}\n</code></pre> <p>The <code>getFlow()</code> function is pretty self explanatory and exposes the <code>SavedStateHandle.getLiveData()</code> as a <code>Flow</code> directly, which could help for unit testing avoiding the need to mess around with <code>LiveData</code> directly. </p> <p>The <code>getSavedStateFlow()</code> is the real meat and potatoes of this library as that is how to create an instance of a <code>SavedStateFlow</code>. Notice the first parameter to this function is <code>viewModelScope</code>, that is because the <code>SavedStateFlow</code> will use that <code>CoroutineScope</code> to collect new values from the <code>SavedStateHandle</code> whenever the value changes and will also stop collecting the values when the <code>ViewModel</code> itself is cleared. So putting everything together, one simple usage of <code>SavedStateFlow</code> might look like the following: </p> <pre><code>class MainViewModel(\n    savedStateFlowHandle: SavedStateFlowHandle,\n    private val newsDataSource: NewsDataSource\n) : ViewModel() {\n\n    private val query: SavedStateFlow&lt;String&gt; =\n        savedStateFlowHandle.getSavedStateFlow(\n            viewModelScope = viewModelScope,\n            key = \"main-viewmodel-query-key\", \n            defaultValue = \"\"\n        )\n\n    init {\n        observeQuery()\n    }\n\n    fun updateQuery(query: String) {\n        this.query.value = query\n    }\n\n    private fun observeQuery() {\n        viewModelScope.launch {\n            query.asStateFlow()\n                .flatMapLatest { query -&gt;\n                    // fetch the results for the latest query\n                    newsDataSource.fetchQuery(query)\n                }\n                .collect { results -&gt;\n                    // Update with the latest results\n                }\n        }\n    }\n}\n</code></pre> <p>Since <code>SavedStateFlow</code> is a wrapper around <code>SavedStateHandle</code>, the following note from the documentation should be observed. \"State must be simple and lightweight. For complex or large data, you should use local persistence.\"</p>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/#how-to-inject-savedstateflowhandle","title":"How to inject SavedStateFlowHandle?","text":"<p>In the sample above, there was an extension function on <code>SavedStateHandle</code> to get an instance of a <code>SavedStateFlowHandle</code>. Some of you might be wondering how one actually injects that into a <code>ViewModel</code>. Well if you're doing manual injection, this is pretty simple using the <code>AbstractSavedStateViewModelFactory</code> and there is a sample of this in the documentation. </p> <p>However, where this library really shines in the developer experience is when you are using Hilt because there is a separate artifact which can automatically scope a <code>SavedStateFlowHandle</code> to any <code>@HiltViewModel</code>. </p> <pre><code>@HiltViewModel\nclass MainViewModel @Inject constructor(\n    savedStateFlowHandle: SavedStateFlowHandle\n) : ViewModel()\n</code></pre> <p>However, not every <code>ViewModel</code> can be annotated with <code>@HiltViewModel</code> when values passed through the constructor are determined at runtime which is when assisted injection can be used. In this scenario, there are a few extension methods provided which can provide a <code>SavedStateFlowHandle</code> when using assisted injection. </p> <pre><code>class MyAssistedViewModel @AssistedInject constructor(\n    @Assisted savedStateFlowHandle: SavedStateFlowHandle,\n    @Assisted id: String\n) : ViewModel() {\n\n    @AssistedFactory\n    interface Factory {\n        fun create(savedStateFlowHandle: SavedStateFlowHandle, id: String): MyAssistedViewModel\n    }\n}\n\n@AndroidEntryPoint\nclass AssistedFragment : Fragment() {\n    @Inject\n    lateinit var factory: MyAssistedViewModel.Factory\n\n    private val viewModel: MyAssistedViewModel by assistedViewModel { savedStateFlowHandle -&gt;\n        factory.create(savedStateFlowHandle, arguments?.getString(\"some-argument-key\")!!)\n    }\n}\n</code></pre> <p>For more information on the <code>SavedStateFlow</code> Hilt integration, please check out the documentation.</p>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/#testing","title":"Testing","text":"<p>The main motivation for writing this library was for testing and to avoid messing around with <code>LiveData</code>, so there is a test artifact that can be used for unit tests called <code>TestSavedStateFlow</code>. The addition to this class allows you to provide a default value or a cached value which is null by default for different testing scenarios. One basic usage of this artifact with Mockk is as shown below: </p> <pre><code>class SomeTest {\n    @Test\n    fun `some test`() = runBlocking {\n        val savedStateHandle: SavedStateFlowHandle = mockk()\n        val savedStateFlow = TestSavedStateFlow&lt;String&gt;(\n            defaultValue = \"\", \n            cachedValue = \"some cached value\"\n        )\n        every { savedStateHandle.getSavedStateFlow(any(), \"some-key\", \"\") } returns savedStateFlow\n\n        val viewModel = MyViewModel(savedStateHandle)\n        // omitted test code\n    }\n}\n</code></pre> <p>For more information on testing and how this could be used with Turbine, please check out the documentation.</p>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/#conclusion","title":"Conclusion","text":"<p>In this article we went over how to create/use a <code>SavedStateFlow</code>, inject a <code>SavedStateFlowHandle</code> into a <code>ViewModel</code> and how to test with <code>TestSavedStateFlow</code>. I highly encourage you to check out the documentation which has more detailed samples and the GitHub repository if you want to take a look at the source code or even make a contribution if you see ways it could be improved. </p> <p>Hope someone else finds this library useful until Google decides to support this functionality officially sometime in the future. Enjoy!</p>"},{"location":"blog/2022/01/06/surviving-android-process-death-with-savedstateflow/#resources","title":"Resources","text":"<ul> <li>Github Repository</li> <li>Project site - documentation</li> <li>Publishing Android libraries to MavenCentral in 2021 - I have never published a library before and this article was very helpful for getting this library up on MavenCentral</li> </ul>"},{"location":"blog/2022/05/04/how-to-track-view-impressions-in-a-jetpack-compose-lazy-column/","title":"How to track view impressions in a Jetpack Compose Lazy Column","text":"<p>If you have ever shipped a feature with a scrolling list, a product manager will usually ask you to track when an item in that list is viewed by the user. With Jetpack Compose being somewhat new, I was curious how to solve this problem with respect to a <code>LazyColumn</code> so let's learn how to know the second eyeballs see items as they scroll into view!</p> <p></p>"},{"location":"blog/2022/05/04/how-to-track-view-impressions-in-a-jetpack-compose-lazy-column/#build-the-ui","title":"Build the UI","text":"<p>The data model for the list will be a very simple data class that has a <code>key</code> property which will be important for use with the <code>LazyColumn</code> to know exactly which items are coming into view. The <code>key</code> can technically be <code>Any</code> type, the important thing is to ensure there is an <code>equals</code> method on whatever type you choose so for simplicity in this example we will make it a <code>String</code>. </p> <pre><code>data class Person(val key: String, val name: String)\n</code></pre> <p>To start off building the UI for this sample, we will start with a <code>LazyColumn</code> lifting the <code>LazyListState</code> up as this will become important later to calculate exactly which items are scrolling into view. The other important callout here is declaring the key for the items in the <code>LazyColumn</code> by passing in the <code>key</code> property on a <code>Person</code> discussed earlier. Finally, pass the lazy list state down into each item in the list. </p> <pre><code>@Composable\nfun ListView(\n    people: List&lt;Person&gt;,\n    onDeleteClicked: (Person) -&gt; Unit,\n    onItemViewed: (Person) -&gt; Unit\n) {\n    val lazyListState = rememberLazyListState() // lift the lazy list state\n    LazyColumn(state = lazyListState) {\n        items(people.size, key = { people[it].key }) { // declare the key for item\n            val person = people[it]\n            PersonRow(lazyListState, person, onDeleteClicked, onItemViewed) // pass lazy list state into item\n        }\n    }\n}\n</code></pre> <p>Now looking at the <code>PersonRow</code> composable, we will make use of an <code>ItemImpression</code> composable passing in the lazy list state as this will be where the logic for knowing when this item was scrolled into view. </p> <pre><code>@Composable\nfun PersonRow(lazyListState: LazyListState, person: Person, onDeleteClicked: (Person) -&gt; Unit, onItemViewed: (Person) -&gt; Unit) {\n    ItemImpression(key = person.key, lazyListState = lazyListState) {\n        onItemViewed(person)\n    }\n    // omitted UI code for row \n}\n</code></pre> <p>Now the <code>ItemImpression</code> composable technically doesn't have any UI related code in it as its really just concerned with determining when a specific <code>key</code> has scrolled into view of the <code>LazyListState</code>. However, we will make use of <code>derivedStateOf</code> in Compose to ensure that the <code>isItemWithKeyInView</code> is calculated when the state of the <code>lazyListState</code> changes, but will only cause recomposition when the value of the derived state changes. Then the <code>LaunchedEffect</code> will fire exactly one time since <code>Unit</code> is being passed in as the key which notifies when the item was viewed. </p> <pre><code>@Composable\nfun ItemImpression(key: Any, lazyListState: LazyListState, onItemViewed: () -&gt; Unit) {\n    val isItemWithKeyInView by remember {\n        derivedStateOf {\n            lazyListState.layoutInfo\n                .visibleItemsInfo\n                .any { it.key == key }\n        }\n    }\n    if (isItemWithKeyInView) {\n        LaunchedEffect(Unit) { onItemViewed() }\n    }\n}\n</code></pre>"},{"location":"blog/2022/05/04/how-to-track-view-impressions-in-a-jetpack-compose-lazy-column/#analytics-tracker","title":"Analytics Tracker","text":"<p>With the compose code written so far, this will notify when an item is scrolled into view. However, it will notify when an item is not just scrolled from the bottom into view but also being scrolled back into view from the top. Most product managers probably only care to know that an item was viewed once, which is pretty easy to ensure by making use of a <code>HashSet</code> and checking if that key exists in the <code>HashSet</code> before determining if the impression analytics event should be fired. </p> <pre><code>class AnalyticsTracker {\n\n    private val recordedPeople = hashSetOf&lt;String&gt;()\n\n    fun onPersonViewed(person: Person) {\n        if (recordedPeople.contains(person.key)) return\n        recordedPeople.add(person.key)\n        Log.d(\"Item Impression\", person.toString())\n    }\n}\n</code></pre>"},{"location":"blog/2022/05/04/how-to-track-view-impressions-in-a-jetpack-compose-lazy-column/#viewmodel","title":"ViewModel","text":"<p>One of the last things to glue everything together is making a <code>ViewModel</code> to delegate events to the tracker for view impressions of items and manage the state of the list. Note for simplicity the tracker is just instantiated in the <code>ViewModel</code>, in a production project one would inject this dependency with your dependency injection framework of choice. I didn't want to over complicate this sample with a DI framework though. </p> <pre><code>class MainViewModel : ViewModel() {\n\n    private val tracker = AnalyticsTracker()\n\n    private var _state: MutableStateFlow&lt;List&lt;Person&gt;&gt; = MutableStateFlow(people)\n    val state: StateFlow&lt;List&lt;Person&gt;&gt; get() = _state\n\n    fun onDeleteClicked(person: Person) {\n        _state.value = _state.value.toMutableList().also { it.remove(person) }\n    }\n\n    fun onPersonViewed(person: Person) {\n        tracker.onPersonViewed(person)\n    }\n}\n</code></pre>"},{"location":"blog/2022/05/04/how-to-track-view-impressions-in-a-jetpack-compose-lazy-column/#final-outcome","title":"Final Outcome","text":"<p>That's it! If you want to look at complete source code for this sample, it is linked in the section below. Hope this helps and don't be afraid to leave a comment!</p>"},{"location":"blog/2022/05/04/how-to-track-view-impressions-in-a-jetpack-compose-lazy-column/#resources","title":"Resources","text":"<ul> <li>Github Repository</li> <li>Stack Overflow Answer - an efficient way to check when a specific LazyColumn item comes into view</li> </ul>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/","title":"How to use Firebase Authentication with Ktor 2.0","text":"<p>With the release of Ktor 2.0, one of the migrations I had to do was for Firebase Authentication which I first learned about how to use with Ktor 1.6 from this medium article last year. Learn how to setup Firebase Authentication with Ktor 2.0 and how to test it. </p>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#project-setup","title":"Project Setup","text":""},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#firebase-project-setup","title":"Firebase Project Setup","text":"<p>Before downloading the starter project, follow these instructions to create a new firebase project and enable authentication. Then click on the settings button in the side bar -&gt; project settings -&gt; service accounts tab -&gt; generate a new private key which should then download a JSON file to your machine. </p> <p></p> <p></p>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#download-and-configure-project","title":"Download and Configure Project","text":"<p>Then download the Ktor Project Template from the Ktor Project Generator site. It will setup Ktor with 2.0.3 and the following plugins:</p> <ul> <li>Authentication</li> <li>Content Negotiation</li> <li>kotlinx.serialization</li> <li>Routing</li> </ul> <p>Now with the JSON file downloaded from the service account creation, rename this file to <code>ktor-firebase-auth-adminsdk.json</code> and move it into this project under <code>src/main/resources/ktor-firebase-auth-adminsdk.json</code></p> <p>The service account JSON configuration should not be checked into your git repository as this should be kept secret. To prevent this, add the file <code>src/main/resources/ktor-firebase-auth-adminsdk.json</code> to your <code>.gitignore</code> file. </p> <p>Finally add the Firebase Admin Java SDK to the <code>build.gradle.kts</code> file in order to user Firebase Authentication. </p> <pre><code>dependencies {\n    implementation(\"com.google.firebase:firebase-admin:9.0.0\")\n}\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#setup-firebase-app","title":"Setup Firebase App","text":"<p>With the project configured, the FirebaseApp on the server must be initialized using the service account JSON file placed in the resources folder.</p> <pre><code>object FirebaseAdmin {\n    private val serviceAccount: InputStream? =\n        this::class.java.classLoader.getResourceAsStream(\"ktor-firebase-auth-adminsdk.json\")\n\n    private val options: FirebaseOptions = FirebaseOptions.builder()\n        .setCredentials(GoogleCredentials.fromStream(serviceAccount))\n        .build()\n\n    fun init(): FirebaseApp = FirebaseApp.initializeApp(options)\n}\n</code></pre> <p>Then simply call the <code>init()</code> function when the server is first started. </p> <pre><code>fun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        FirebaseAdmin.init()\n        // configure rest of project\n    }.start(wait = true)\n}\n</code></pre> <p>Now the Firebase Admin SDK is ready to use and we will learn to configure a Ktor authentication plugin to work with Firebase Authentication. </p>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#setup-firebase-authentication","title":"Setup Firebase Authentication","text":"<p>With the Firebase Admin SDK initialized, it is time to create a Ktor Authentication Provider that can verify the JSON web token(JWT) from incoming requests are from an authenticated Firebase user.  </p>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#create-a-principal","title":"Create a Principal","text":"<p>First create a simple data class called <code>User</code> which will have some basic properties to represent a Firebase user, note how this extends the <code>Principal</code> interface to indicate to Ktor this class represents an authenticated principal. Feel free to add more properties to this file that fit your needs of what represents a user in your application. </p> <pre><code>data class User(val userId: String = \"\", val displayName: String = \"\") : Principal\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#create-authenticationprovider","title":"Create AuthenticationProvider","text":"<p>Now a Ktor <code>AuthenticationProvider</code> can be created which will verify the incoming request's JWT and set the principal on the request to the current <code>User</code> if they are unauthenticated. I will have to credit Aleksei Tirman for the inspiration for this solution, although I did make a couple small tweaks to improve the error messaging and will try to break it down. </p> <p>First create a <code>FirebaseConfig</code> class that extends <code>AuthenticationProvider.Config</code> which will provide a lambda to convert a Ktor Request and verified <code>FirebaseToken</code> to the <code>User</code> class. </p> <pre><code>class FirebaseConfig(name: String?) : AuthenticationProvider.Config(name) {\n    internal var authHeader: (ApplicationCall) -&gt; HttpAuthHeader? =\n        { call -&gt; call.request.parseAuthorizationHeaderOrNull() }\n\n    var firebaseAuthenticationFunction: AuthenticationFunction&lt;FirebaseToken&gt; = {\n        throw NotImplementedError(FirebaseImplementationError)\n    }\n\n    fun validate(validate: suspend ApplicationCall.(FirebaseToken) -&gt; User?) {\n        firebaseAuthenticationFunction = validate\n    }\n}\n\nfun ApplicationRequest.parseAuthorizationHeaderOrNull(): HttpAuthHeader? = try {\n    parseAuthorizationHeader()\n} catch (ex: IllegalArgumentException) {\n    println(\"failed to parse token\")\n    null\n}\n\nprivate const val FirebaseImplementationError =\n    \"Firebase  auth validate function is not specified, use firebase { validate { ... } } to fix this\"\n</code></pre> <p>Now create the <code>FirebaseAuthProvider</code> class and extend the <code>AuthenticationProvider</code>. Here is where the bulk of the logic doing the verification with the Firebase Authentication will happen and set the <code>User</code> as the principal if the user request is authenticated. </p> <pre><code>class FirebaseAuthProvider(config: FirebaseConfig) : AuthenticationProvider(config) {\n    val authHeader: (ApplicationCall) -&gt; HttpAuthHeader? = config.authHeader\n    private val authFunction = config.firebaseAuthenticationFunction\n\n    override suspend fun onAuthenticate(context: AuthenticationContext) {\n        val token = authHeader(context.call)\n\n        if (token == null) {\n            context.challenge(\n                FirebaseJWTAuthKey,\n                AuthenticationFailedCause.InvalidCredentials\n            ) { challengeFunc, call -&gt;\n                challengeFunc.complete()\n                call.respond(UnauthorizedResponse(HttpAuthHeader.bearerAuthChallenge(realm = FIREBASE_AUTH)))\n            }\n            return\n        }\n\n        try {\n            val principal = verifyFirebaseIdToken(context.call, token, authFunction)\n\n            if (principal != null) {\n                context.principal(principal)\n            }\n        } catch (cause: Throwable) {\n            val message = cause.message ?: cause.javaClass.simpleName\n            context.error(FirebaseJWTAuthKey, AuthenticationFailedCause.Error(message))\n        }\n    }\n}\n\nsuspend fun verifyFirebaseIdToken(\n    call: ApplicationCall,\n    authHeader: HttpAuthHeader,\n    tokenData: suspend ApplicationCall.(FirebaseToken) -&gt; Principal?\n): Principal? {\n    val token: FirebaseToken = try {\n        if (authHeader.authScheme == \"Bearer\" &amp;&amp; authHeader is HttpAuthHeader.Single) {\n            withContext(Dispatchers.IO) {\n                FirebaseAuth.getInstance().verifyIdToken(authHeader.blob)\n            }\n        } else {\n            null\n        }\n    } catch (ex: Exception) {\n        ex.printStackTrace()\n        return null\n    } ?: return null\n    return tokenData(call, token)\n}\n\nfun HttpAuthHeader.Companion.bearerAuthChallenge(realm: String): HttpAuthHeader =\n    HttpAuthHeader.Parameterized(\"Bearer\", mapOf(HttpAuthHeader.Parameters.Realm to realm))\n\nconst val FIREBASE_AUTH = \"FIREBASE_AUTH\"\nconst val FirebaseJWTAuthKey: String = \"FirebaseAuth\"\n</code></pre> <p>Finally create an extension function on <code>AuthenticationConfig</code> which will create an instance of the <code>FirebaseAuthProvider</code> and register it to the Ktor application. </p> <pre><code>fun AuthenticationConfig.firebase(\n    name: String? = FIREBASE_AUTH,\n    configure: FirebaseConfig.() -&gt; Unit\n) {\n    val provider = FirebaseAuthProvider(FirebaseConfig(name).apply(configure))\n    register(provider)\n}\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#install-authentication-plugin","title":"Install Authentication Plugin","text":"<p>The <code>firebase()</code> extension function can now be used when installing the <code>Authentication</code> plugin on the Ktor <code>Application</code>. The <code>validate {}</code> lambda is where any additional information of a user could be looked up that does not exist on a <code>FirebaseToken</code> object. </p> <pre><code>fun Application.configureFirebaseAuth() {\n    install(Authentication) {\n        firebase {\n            validate {\n                // TODO look up user profile from DB\n                User(it.uid, it.name.orEmpty())\n            }\n        }\n    }\n}\n</code></pre> <p>Now call this extenstion function after the <code>FirebaseAdmin.init()</code> function to complete the integration. </p> <pre><code>fun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        FirebaseAdmin.init()\n        configureFirebaseAuth()\n    }.start(wait = true)\n}\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#create-authenticated-route","title":"Create Authenticated Route","text":"<p>Now with Firebase Authentication configured in the Ktor project, authenticated routes can be made using the same <code>FIREBASE_AUTH</code> constant that was used to register the plugin. Simply wrap any <code>Route</code> with <code>authenticate(FIREBASE_AUTH) { }</code>. If the user's request has an invalid/expired JWT in the original request, the route should respond with an unauthorized 401 http status. </p> <pre><code>fun Route.authenticatedRoute() {\n    authenticate(FIREBASE_AUTH) {\n        get(\"/authenticated\") {\n            val user: User =\n                call.principal() ?: return@get call.respond(HttpStatusCode.Unauthorized)\n            call.respond(\"User is authenticated: $user\")\n        }\n    }\n}\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#testing","title":"Testing","text":""},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#manual-testing","title":"Manual Testing","text":"<p>To manually test the Firebase integration, you will need to get a valid JWT to send to the server in the authorization header. You may retrieve one the sign up or sign in Firebase restful API. The example curl request below will make the sign up request, replace <code>insert-api-key</code> with your Firebase web api key which can be found in the Firebase Console under Project Settings. </p> <pre><code>curl --location --request POST 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=insert-api-key' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"email\" : \"test@plusmobileapps.com\",\n    \"password\" : \"Password123!\",\n    \"returnSecureToken\" : true\n}'\n</code></pre> <p>This should return a JSON object and you will need the <code>idToken</code> property for authenticated requests later. </p> <pre><code>{\n    \"idToken\": \"extract this token value\"\n}\n</code></pre> <p>Now you can make the request to your server injecting the token from the last step as the bearer for authentication. </p> <pre><code>curl --location --request GET 'http://0.0.0.0:8080/authenticated' \\\n--header 'Authorization: Bearer insert-token-value'\n\n\"User is authenticated: User(userId=some-user-id, displayName=Andrew)\"\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#unit-testing-authenticated-routes","title":"Unit Testing Authenticated Routes","text":"<p>To write unit tests for an authenticated route, we will create a <code>FirebaseAuthTestProvider</code> which will allow a mocked <code>User</code> to be provided and set as the principal. </p> <pre><code>class FirebaseAuthTestProvider(config: FirebaseTestConfig) : AuthenticationProvider(config) {\n\n    private val authFunction: () -&gt; User? = config.mockAuthProvider\n\n    override suspend fun onAuthenticate(context: AuthenticationContext) {\n        val mockUser: User? = authFunction()\n        if (mockUser != null) {\n            context.principal(mockUser)\n        } else {\n            context.error(\n                FirebaseJWTAuthKey,\n                AuthenticationFailedCause.Error(\"User was mocked to be unauthenticated\")\n            )\n        }\n    }\n}\n\nclass FirebaseTestConfig(name: String?) : AuthenticationProvider.Config(name) {\n\n    var mockAuthProvider: () -&gt; User? = { null }\n\n}\n</code></pre> <p>Then create an extension function on <code>ApplicationTestBuilder</code> that will install the authentication plugin and register the <code>FirebaseAuthTestProvider</code>. </p> <pre><code>val defaultTestUser = User(userId = \"some-user-id\", displayName = \"Darth Vader\")\n\nfun ApplicationTestBuilder.mockAuthentication(mockAuth: () -&gt; User? = { defaultTestUser }) {\n    install(Authentication) {\n        val provider = FirebaseAuthTestProvider(FirebaseTestConfig(FIREBASE_AUTH).apply {\n            mockAuthProvider = mockAuth\n        })\n        register(provider)\n    }\n}\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#create-a-ktor-test","title":"Create a Ktor Test","text":"<p>To write a Ktor test for an authenticated route, make use of the newly created <code>mockAuthentication { }</code> function, install the authenticated route under test, and call it with the client. </p> <pre><code>class AuthenticatedRouteTest {\n    @Test\n    fun `authenticated route - is authenticated`() = testApplication {\n        val user = User(\"some id\", \"Andrew\")\n        mockAuthentication { user }\n        routing { authenticatedRoute() }\n\n        client.get(\"/authenticated\").apply {\n            assertEquals(HttpStatusCode.OK, status)\n            assertEquals(\"User is authenticated: $user\", bodyAsText())\n        }\n    }\n}\n</code></pre> <p>Also worth mentioning since the <code>mockAuth</code> function parameter defaults to returning the <code>defaultTestUser</code>, this authenticated test could also be rewritten like so: </p> <pre><code>@Test\nfun `authenticated route - is authenticated`() = testApplication {\n    mockAuthentication()\n    routing { authenticatedRoute() }\n\n    client.get(\"/authenticated\").apply {\n        assertEquals(HttpStatusCode.OK, status)\n        assertEquals(\"User is authenticated: $defaultTestUser\", bodyAsText())\n    }\n}\n</code></pre> <p>If you were so inclined to test an unauthorized user, simply return null in the <code>mockAuthentication { }</code> lambda. </p> <pre><code>@Test\nfun `authenticated route - is unauthorized`() = testApplication {\n    mockAuthentication { null }\n    routing { authenticatedRoute() }\n\n    client.get(\"/authenticated\").apply {\n        assertEquals(HttpStatusCode.Unauthorized, status)\n    }\n}\n</code></pre>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#conclusion","title":"Conclusion","text":"<p>At this point, you should have a Ktor server configured with Firebase authentication and learned how to write Ktor tests with a Firebase test authentication provider. If you wish to see all the source code for this project please check out the link below. Happy coding! </p>"},{"location":"blog/2022/08/02/how-to-use-firebase-authentication-with-ktor-20/#resources","title":"Resources","text":"<ul> <li>Github Repository - Source Code</li> </ul>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/","title":"Ktor Database Beginners Guide","text":"<p>I have been using Ktor, PostgreSQL, and Jetbrains Exposed for a backend in a hobby project. I was adding a new feature that required making changes to the database, so after a quick Google search found a Stackoverflow answer recommending using Flyway to manage the database migrations. I was looking for a more complete solution to this answer, so ended up creating a sample project to share my learnings in migrating a Postgres database with Flyway in a Ktor project.  </p>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#setup","title":"Setup","text":"<p>To start off this project I had used the Ktor project generator with minimal plugins to get a basic server up and running: </p> <ul> <li>Routing - define structured routes for a few endpoints</li> <li>Content negotiation - automatic content conversion according to the Content-Type and Accept headers</li> <li>Kotlinx serialization - JSON serialization </li> </ul> <p>The project generator doesn't use gradle version catalogs out of the box, so I had updated the project to make use of them to have all the versions managed in one place which can be found at libs.versions.toml file. </p>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#initialize-database","title":"Initialize Database","text":""},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#create-database-server","title":"Create Database Server","text":"<p>First, we must get a Postgres server running on our local machine.  Since I am on a Mac, I use Postgres App to create a Postgres server on my machine as this provides a very simple GUI to get a Postgres database server running. Once the server is up, you will need the JDBC url which will look something like this to be within your system environment since you don't want to expose your production DB credentials within your source code. You can export this within your terminal running the following command in your bash. </p> <pre><code>export JDBC_DATABASE_URL=\"jdbc:postgresql://localhost:5432/postgres\"\n</code></pre> <p>Or you can pass this environment variable when running the project from the command line: </p> <pre><code>./gradlew run -PJDBC_DATABASE_URL=\"jdbc:postgresql://localhost:5432/postgres\"\n</code></pre>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#connect-to-database","title":"Connect to Database","text":"<p>To get a database running with Ktor, the libraries used for this project are: </p> <ul> <li>PostgreSQL JDBC Driver - enables connecting a Java program to a PostgreSQL database</li> <li>Exposed - object-relational mapping (ORM) to abstract away working with raw SQL statements</li> <li>Hikari - high-performance and lightweight JDBC connection pool</li> </ul> <p>Add the dependencies to the <code>build.gradle.kts</code>. </p> <pre><code>val exposeVersion = \"0.50.1\"\nimplementation(\"org.jetbrains.exposed:exposed-core:$exposedVersion\")\nimplementation(\"org.jetbrains.exposed:exposed-dao:$exposedVersion\")\nimplementation(\"org.jetbrains.exposed:exposed-jdbc:$exposedVersion\")\nimplementation(\"org.postgresql:postgresql:42.7.2\")\nimplementation(\"com.zaxxer:HikariCP:5.1.0\")\n</code></pre> <p>Then create an interface to allow us to query the database, this will help abstract away the database implementation detail from the rest of the app which will help with testing later. </p> <pre><code>package com.plusmobileapps.data\n\ninterface Database {\n    suspend fun &lt;T&gt; dbQuery(block: () -&gt; T): T\n}\n</code></pre> <p>Now create the implementation of the <code>Database</code> by injecting the IO dispatcher so queries will not block the main thread and the environment variable for the JDBC url declared earlier. </p> <pre><code>class DatabaseImpl(\n    private val ioContext: CoroutineContext = Dispatchers.IO,\n    private val jdbcUrl: String = System.getenv(\"JDBC_DATABASE_URL\"),\n) : com.plusmobileapps.data.Database {\n\n    init {\n        val datasource = hikariDataSource()\n        // Connect Exposed to the database\n        Database.connect(datasource)\n    }\n\n    // Move all db queries to io thread and wrap within a DB transaction\n    override suspend fun &lt;T&gt; dbQuery(block: () -&gt; T): T = withContext(ioContext) {\n        transaction { block() }\n    }\n\n    // Create datasource with Hikari passing in the JDBC url\n    private fun hikariDataSource(): HikariDataSource = HikariDataSource(\n        HikariConfig().apply {\n            driverClassName = \"org.postgresql.Driver\"\n            jdbcUrl = this@DatabaseImpl.jdbcUrl\n            maximumPoolSize = 3\n            isAutoCommit = true\n            transactionIsolation = \"TRANSACTION_REPEATABLE_READ\"\n            validate()\n        }\n    )\n}\n</code></pre> <p>Finally create an instance of the database at application start. </p> <pre><code>fun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\", module = Application::module)\n        .start(wait = true)\n}\n\nfun Application.module() {\n    val database: Database = DatabaseImpl()\n    configureRouting(database)\n}\n</code></pre>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#interacting-with-database","title":"Interacting With Database","text":"<p>At this point the database has been initialized and the application should be connected to the database, although we haven't done anything with the database yet. Lets create a dogs table using Exposed which will have a couple of properties for name and image url. </p> <pre><code>object Dogs : UUIDTable() {\n    val name = varchar(\"dog_name\", 50).index()\n    val imageUrl = text(\"image_url\").nullable()\n}\n</code></pre> <p>We could technically work with the dogs table as is, although Exposed provides a DAO API which makes working with a table even easier.</p> <pre><code>class Dog(id: EntityID&lt;UUID&gt;) : UUIDEntity(id) {\n\n    companion object : UUIDEntityClass&lt;Dog&gt;(Dogs)\n\n    var name: String by Dogs.name\n    var imageUrl: String? by Dogs.imageUrl\n}\n</code></pre> <p>So now if a create dog or get all dogs endpoint was made, interacting with the database will now have some idiomatic APIs to access or create a new dog in the table. A <code>DogDto</code> is made to be able to respond to any API requests with which will have a convenience function for mapping from a database entity.</p> <pre><code>@Serializable\ndata class DogDto(\n    val uuid: String,\n    val name: String,\n    val imageUrl: String?,\n) {\n    companion object {\n        fun fromEntity(dog: Dog): DogDto = DogDto(\n            uuid = dog.id.value.toString(),\n            name = dog.name,\n            imageUrl = dog.imageUrl,\n        )\n    }\n}\n\nfun Route.getDogs(database: Database) {\n    get(DOGS_ENDPOINT) {\n        val dogs = database.dbQuery {\n            Dog.all().toList().map { DogDto.fromEntity(it) }\n        }\n        call.respond(HttpStatusCode.OK, mapOf(\"dogs\" to dogs))\n    }\n}\n\nfun Route.addDog(database: Database) {\n    post(DOGS_ENDPOINT) {\n        try {\n            val dog = call.receive&lt;DogDto&gt;()\n            val newDog = database.dbQuery {\n                Dog.new {\n                    name = dog.name\n                    imageUrl = dog.imageUrl\n                }\n            }\n            call.respond(HttpStatusCode.OK, DogDto.fromEntity(newDog))\n        } catch (e: Exception) {\n            println(e.message)\n            call.respond(HttpStatusCode.InternalServerError)\n        }\n    }\n}\n</code></pre> <p>If you were to run the project at this point though, you will actually see the app crash when the endpoint is called because the dogs table doesn't exist since it was never created. Exposed provides a convenience method that can create the table for us by calling <code>SchemaUtils.create(Dogs)</code>. However the second you need to add columns to this table, it becomes increasingly more difficult to manage database migrations since Exposed doesn't offer this out of the box. Flyway to the rescue!</p>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#database-migrations","title":"Database Migrations","text":"<p>As a project scales and evolves over time, migrating databases is a crucial tool as you can recreate the same database quickly and easily understand the state a database will be in. Flyway is one library that can help manage database migrations which will be used for this tutorial, specifically the Flyway Java API. </p> <p>First start by adding the dependencies to the <code>build.gradle.kts</code>. Flyway specifically needs the Flyway Postgres driver in the classpath, so that will need to be declared in the buildscript. </p> <pre><code>val flywayVersion = \"10.12.0\"\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.flywaydb:flyway-database-postgresql:$flywayVersion\")\n    }\n}\n\ndependencies {\n    implementation(\"org.flywaydb:flyway-core:$flywayVersion\")\n    implementation(\"org.flywaydb:flyway-database-postgresql:$flywayVersion\")\n}\n</code></pre> <p>After syncing the project, in the <code>src/main/resources/db/migration</code> folder create a file, <code>V1__Create_dogs_table.sql</code>, for the first version of the database to create the dogs table. </p> <pre><code>CREATE TABLE Dogs\n(\n    id        UUID PRIMARY KEY,\n    name      VARCHAR(50),\n    image_url TEXT\n);\n</code></pre> <p>Then the Flyway Java API can be used in the <code>DatabaseImpl</code> file to run the migrations before Exposed connects to the database. </p> <pre><code>class DatabaseImpl() : com.plusmobileapps.data.Database {\n\n    init {\n        val datasource = hikariDataSource()\n        migrate(datasource)\n        Database.connect(datasource)\n    }\n\n    private fun migrate(dataSource: DataSource) {\n        try {\n            val flyway = Flyway.configure()\n                .dataSource(dataSource)\n                .load()\n            flyway.migrate()\n        } catch (e: FlywayException) {\n            LOGGER.error(\"Failed to migrate database\", e)\n        }\n    }\n}\n</code></pre> <p>Now when the app is ran, Flyway will run any migrations if any need to be applied from all the migration files that exist in <code>src/main/resources/db/migration</code> folder. So now when the API endpoints are called to get or create dogs, Exposed won't complain about the tables not existing since Flyway would have created it from the first version of the DB migration.</p> <p>The real magic to Flyway comes as you need to make changes to the database, for example adding a new column for dog breed. </p> <pre><code>object Dogs : UUIDTable() {\n    //\n    val breed = text(\"breed\").nullable()\n}\n\nclass Dog(id: EntityID&lt;UUID&gt;) : UUIDEntity(id) {\n    // \n    var breed: String? by Dogs.breed\n}\n</code></pre> <p>Then a new migration can be added, <code>V2__Add_breed_to_dogs_table.sql</code> which will alter the dogs table to have a new column. </p> <pre><code>ALTER TABLE Dogs\n    ADD COLUMN breed TEXT;\n</code></pre> <p>Without any additional changes, the next time the app is run Flyway will automatically detect the database is on version 1 and migrate the database to version 2 where the dog breed column was added.</p>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#testing","title":"Testing","text":"<p>When it comes to testing a Ktor app with a database, one common solution is to use H2 database which is an in memory Java database. This will allow us to write tests without the explicit need for a Postgres database. First add the H2 dependency to the <code>build.gradle.kts</code>, note this is imported using <code>testImplementation</code> since this will not be used in production.</p> <pre><code>testImplementation(\"com.h2database:h2:2.2.224\")\n</code></pre> <p>Making use of the <code>Database</code> interface created earlier, a fake implementation can be made using the H2 database for use in tests. </p> <pre><code>class TestDatabase(\n    private val context: CoroutineContext = UnconfinedTestDispatcher(),\n) : Database {\n\n    private val datasource = h2DataSource()\n    private val flyway = Flyway.configure()\n        .dataSource(datasource)\n        .cleanDisabled(false) // allows for clean up after each test.\n        .load()\n\n    init {\n        flyway.migrate()\n        org.jetbrains.exposed.sql.Database.connect(datasource)\n    }\n\n    // To be called after each test to wipe the database\n    fun close() {\n        flyway.clean()\n        datasource.close()\n    }\n\n    override suspend fun &lt;T&gt; dbQuery(block: () -&gt; T): T = withContext(context) {\n        transaction { block() }\n    }\n\n    private fun h2DataSource() = HikariDataSource(\n        HikariConfig().apply {\n            driverClassName = \"org.h2.Driver\"\n            jdbcUrl = \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\"\n            maximumPoolSize = 3\n            isAutoCommit = true\n            transactionIsolation = \"TRANSACTION_REPEATABLE_READ\"\n            validate()\n        }\n    )\n}\n</code></pre> <p>Now a test can be created using the test database. To make testing a little simpler I had created a few utility extension functions which will install content negotiation on the server and the client used to call the server.</p> <pre><code>fun myTestApplication(block: suspend ApplicationTestBuilder.() -&gt; Unit) = testApplication {\n    installContentNegotiation()\n    block()\n}\n\nfun ApplicationTestBuilder.createJsonClient(): HttpClient = createClient {\n    install(io.ktor.client.plugins.contentnegotiation.ContentNegotiation) {\n        json()\n    }\n}\n\nfun ApplicationTestBuilder.installContentNegotiation() {\n    install(io.ktor.server.plugins.contentnegotiation.ContentNegotiation) {\n        json()\n    }\n}\n</code></pre> <p>Finally, a test can be written using the <code>TestDatabase</code>. It's important to note that before each test a new instance of <code>TestDatabase</code> is created and after each test the database is closed. Without calling close on the <code>TestDatabase</code>, other tests might fail from having stale data from previous tests that were run so its critical to clean up the database in between every test.</p> <pre><code>class DogRouteTest {\n\n    private lateinit var database: TestDatabase\n\n    @Before\n    fun setUp() {\n        database = TestDatabase()\n    }\n\n    @After\n    fun tearDown() {\n        database.close()\n    }\n\n    @Test\n    fun `GET dogs returns list of dogs`() {\n        myTestApplication {\n            val client = createJsonClient()\n            val dogs = database.prepopulateDogs()\n\n            routing {\n                dogRoutes(database)\n            }\n            val response: HttpResponse = client.get(DOGS_ENDPOINT)\n            response.status shouldBe HttpStatusCode.OK\n            response.body&lt;DogsResponse&gt;() shouldBe DogsResponse(dogs.map { DogDto.fromEntity(it) })\n        }\n    }\n}\n</code></pre>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#deploying-as-jar","title":"Deploying as Jar","text":"<p>Since I use Heroku to actually deploy my projects to production, the project needs to be exported as a jar. I did run into one issue where Flyway couldn't be run from the jar only, so figured its worth calling out how I managed to get around that. Instead of manually creating a new task that can package up the project into a jar, Ktor actually provides a solution with the plugin to create a fat jar. </p> <p>First add the Ktor plugin to the project. </p> <pre><code>plugins {\n    id(\"io.ktor.plugin\") version \"2.3.11\"\n}\n</code></pre> <p>Ensure the main class is set within the application block. </p> <pre><code>application {\n    mainClass.set(\"com.plusmobileapps.ApplicationKt\")\n}\n</code></pre> <p>Then in the terminal run the command to build the fat jar. </p> <pre><code>./gradlew buildFatJar\n</code></pre> <p>Finally the app can be run from jar!</p> <pre><code>java -jar build/libs/ktor-postgres-flyway-all.jar\n</code></pre>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#conclusion","title":"Conclusion","text":"<p>As this article comes to a close, you should have learned how to setup a Postgres database in a Ktor project and how to manage database migrations with Flyway. Hope this helps someone else and always open to feedback if you want to leave a comment. Happy coding!</p>"},{"location":"blog/2024/05/25/Postgres%20database%20with%20Flyway%20in%20a%20Ktor%20project/#source-code","title":"Source Code","text":"<ul> <li>Github Repository</li> </ul>"},{"location":"blog/2025/04/04/kotlin-inject-anvil-extensions/","title":"Extending Kotlin Inject Anvil for Assisted Factories","text":"<p>I recently started using Kotlin inject anvil in my kotlin multiplatform (KMP) projects for dependency injection. However when using assisted injection I noticed myself writing boilerplate code to bind assisted factory method interfaces. In the process of trying to not write all this boiler plate code, I ended up writing a library that extends kotlin inject anvil to generate the code necessary to bind the assisted factory interface. Learn how to use this extension to bind assisted factory method interfaces. </p>"},{"location":"blog/2025/04/04/kotlin-inject-anvil-extensions/#the-problem","title":"The Problem","text":"<p>I use a library called Decompose to manage navigation in my KMP projects which heavily relies on assisted injection to inject a <code>ComponentContext</code> into each business logic component (BloC). For this example, consider a simple interface for <code>MoviesBloc</code> and real implementation of one.</p> <pre><code>interface MoviesBloc {\n  val state: StateFlow&lt;State&gt;\n}\n\n@Inject\n@ContributesBinding(\n  scope = AppScope::class,\n  boundType = MoviesBloc::class\n)\nclass RealMoviesBloc(\n  @Assisted context: ComponentContext\n  private val repository: MovieRepository,\n): MoviesBloc, ComponentContext by context {\n  override val state: StateFlow&lt;State&gt; = TODO()\n}\n</code></pre> <p>Due to a recent contribution I made to kotlin-inject-anvil, to create a <code>MoviesBloc</code> elsewhere a lambda could be injected that takes the assisted parameter as an argument <code>(ComponentContext) -&gt; MoviesBloc</code>. Coming from a background using dagger and anvil, I had become accustomed to a pattern of creating factory interfaces that would create assisted injected dependencies.</p> <pre><code>interface MoviesBloc {\n  interface Factory {\n    fun create(context: ComponentContext): MoviesBloc\n  }\n}\n</code></pre> <p>In order to bind this assisted factory in the dependency graph, a real implementation of this factory would need to be written injecting the lambda parameter. </p> <pre><code>@Inject\n@ContributesBinding(\n  scope = AppScope::class,\n  boundType = MoviesBloc.Factory::class\n)\nclass RealMoviesBlocFactory(\n  private val realFactory: (ComponentContext) -&gt; MoviesBloc\n): MoviesBloc.Factory {\n\n  override fun create(\n    context: ComponentContext\n  ): MoviesBloc = realFactory(context)\n}\n</code></pre> <p>Finally, this factory interface can be injected into other classes to create instances of the <code>MoviesBloc</code>.</p> <pre><code>@Inject\n@ContributesBinding(\n  scope = AppScope::class,\n  boundType = RootBloc::class\n)\nclass RealRootBloc(\n  @Assisted context: ComponentContext,\n  private val moviesBlocFactory: MoviesBloc.Factory,\n): RootBloc, ComponentContext by context {\n\n  private fun createMoviesBloc(context: ComponentContext) = \n    moviesBlocFactory.create(context)\n}\n</code></pre> <p>The <code>RealMoviesBlocFactory</code> seemed like unnecessary boiler plate code just to bind an assisted factory method, so I wrote my first extension of kotlin inject anvil to help remove the need to write all this glue code. </p>"},{"location":"blog/2025/04/04/kotlin-inject-anvil-extensions/#assisted-factory-extension","title":"Assisted Factory Extension","text":"<p>Kotlin inject anvil was designed to be flexible by allowing one to extend the framework to generate components in situations just like this. Which is how the kotlin-inject-anvil-extensions library was created. On top of the usual setup of kotlin-inject-anvil, the extensions can be setup in a similar fashion with instructions found in the documentation.</p> <p>The assisted factory extension has a very simple API with the annotation <code>@ContributesAssistedFactory</code>. This annotation requires two parameters, the anvil scope and the assisted factory interface to bind.</p> <pre><code>@Inject\n@ContributesAssistedFactory(\n  scope = AppScope::class,\n  assistedFactory = MoviesBloc.Factory::class\n)\nclass RealMoviesBloc(\n  @Assisted context: ComponentContext\n  private val repository: MovieRepository,\n): MoviesBloc, ComponentContext by context {\n  //\n}\n</code></pre> <p>Then inject the assisted factory interface wherever needed. </p> <pre><code>@Inject\n@ContributesAssistedFactory(\n  scope = AppScope::class,\n  boundType = RootBloc.Factory::class\n)\nclass RealRootBloc(\n  @Assisted context: ComponentContext,\n  private val moviesBlocFactory: MoviesBloc.Factory,\n): RootBloc, ComponentContext by context {\n\n  private fun createMoviesBloc(context: ComponentContext) = \n    moviesBlocFactory.create(context)\n}\n</code></pre> <p>Warning</p> <p>The <code>@Assisted</code> parameters order of the real implementation constructor must be the same order as your assisted factory interface. If two of the same type are used, these will be mixed up when generating the default factory implementation with the extension if not passed in the exact same order. Consider the following example:</p> <pre><code>interface FooFactory {\n  fun create(id: String, config: String): Foo\n}\n</code></pre> <p>Success</p> <pre><code>@Inject\n@ContributesAssistedFactory(\n  scope = AppScope::class,\n  assistedFactory = FooFactory::class,\n)\nclass RealFoo(\n  @Assisted private val id: String,\n  @Assisted private val config: String,\n): Foo\n</code></pre> <p>Failure</p> <pre><code>@Inject\n@ContributesAssistedFactory(\n  scope = AppScope::class,\n  assistedFactory = FooFactory::class,\n)\nclass RealFoo(\n  @Assisted private val config: String,\n  @Assisted private val id: String,\n): Foo\n</code></pre>"},{"location":"blog/2025/04/04/kotlin-inject-anvil-extensions/#resources","title":"Resources","text":"<ul> <li>kotlin-inject-anvil-extensions - Github</li> <li>kotlin-inject - Github</li> <li>kotlin-inject-anvil - Github</li> <li>Extending kotlin-inject for fun &amp; profit (Talk)</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2020/","title":"2020","text":""},{"location":"blog/archive/2019/","title":"2019","text":""},{"location":"blog/archive/2018/","title":"2018","text":""},{"location":"blog/category/multiplatform/","title":"Multiplatform","text":""},{"location":"blog/category/backend/","title":"Backend","text":""},{"location":"blog/category/ktor/","title":"Ktor","text":""},{"location":"blog/category/database/","title":"Database","text":""},{"location":"blog/category/firebase/","title":"Firebase","text":""},{"location":"blog/category/android/","title":"Android","text":""},{"location":"blog/category/jetpack-compose/","title":"Jetpack Compose","text":""},{"location":"blog/category/coroutines/","title":"Coroutines","text":""},{"location":"blog/category/testing/","title":"Testing","text":""},{"location":"blog/category/productivity/","title":"Productivity","text":""},{"location":"blog/category/opinions/","title":"Opinions","text":""},{"location":"blog/category/bash/","title":"Bash","text":""},{"location":"blog/category/git/","title":"Git","text":""},{"location":"blog/page/2/","title":"Plus Mobile Apps Blog","text":""}]}